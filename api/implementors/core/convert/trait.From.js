(function() {var implementors = {};
implementors["clif_util"] = [{"text":"impl From&lt;Error&gt; for FileInterpreterFailure","synthetic":false,"types":[]}];
implementors["cranelift_codegen"] = [{"text":"impl From&lt;Vec&lt;u8&gt;&gt; for ConstantData","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ [u8]&gt; for ConstantData","synthetic":false,"types":[]},{"text":"impl From&lt;V128Imm&gt; for ConstantData","synthetic":false,"types":[]},{"text":"impl From&lt;Block&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl From&lt;Inst&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl From&lt;Value&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl From&lt;StackSlot&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl From&lt;GlobalValue&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl From&lt;JumpTable&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl From&lt;Constant&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl From&lt;FuncRef&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl From&lt;SigRef&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl From&lt;Heap&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl From&lt;Table&gt; for AnyEntity","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Option&lt;&amp;'a (dyn TargetIsa + 'a)&gt;&gt; for DisplayFunctionAnnotations&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Imm64","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Uimm64","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Uimm32","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ [u8]&gt; for V128Imm","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Offset32","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for Ieee32","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for Ieee64","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Ieee64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a InstructionData&gt; for InstructionFormat","synthetic":false,"types":[]},{"text":"impl From&lt;Opcode&gt; for NonZeroU32","synthetic":false,"types":[]},{"text":"impl From&lt;Inst&gt; for ProgramPoint","synthetic":false,"types":[]},{"text":"impl From&lt;Block&gt; for ProgramPoint","synthetic":false,"types":[]},{"text":"impl From&lt;ValueDef&gt; for ProgramPoint","synthetic":false,"types":[]},{"text":"impl From&lt;Inst&gt; for ExpandedProgramPoint","synthetic":false,"types":[]},{"text":"impl From&lt;Block&gt; for ExpandedProgramPoint","synthetic":false,"types":[]},{"text":"impl From&lt;ValueDef&gt; for ExpandedProgramPoint","synthetic":false,"types":[]},{"text":"impl From&lt;ProgramPoint&gt; for ExpandedProgramPoint","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static RegClassData&gt; for RegClassIndex","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a Flags&gt; for FlagsOrIsa&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a (dyn TargetIsa + 'a)&gt; for FlagsOrIsa&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;L, C, M&gt; From&lt;(L, C, M)&gt; for VerifierError <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Into&lt;AnyEntity&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Into&lt;String&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Into&lt;String&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, M&gt; From&lt;(L, M)&gt; for VerifierError <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Into&lt;AnyEntity&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Into&lt;String&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;VerifierError&gt;&gt; for VerifierErrors","synthetic":false,"types":[]},{"text":"impl From&lt;VerifierErrors&gt; for CodegenError","synthetic":false,"types":[]}];
implementors["cranelift_codegen_meta"] = [{"text":"impl From&lt;Int&gt; for BindParameter","synthetic":false,"types":[]},{"text":"impl From&lt;Bool&gt; for BindParameter","synthetic":false,"types":[]},{"text":"impl From&lt;Float&gt; for BindParameter","synthetic":false,"types":[]},{"text":"impl From&lt;LaneType&gt; for BindParameter","synthetic":false,"types":[]},{"text":"impl From&lt;Reference&gt; for BindParameter","synthetic":false,"types":[]},{"text":"impl From&lt;Immediate&gt; for BindParameter","synthetic":false,"types":[]},{"text":"impl From&lt;LaneType&gt; for ValueType","synthetic":false,"types":[]},{"text":"impl From&lt;ReferenceType&gt; for ValueType","synthetic":false,"types":[]},{"text":"impl From&lt;SpecialType&gt; for ValueType","synthetic":false,"types":[]},{"text":"impl From&lt;VectorType&gt; for ValueType","synthetic":false,"types":[]},{"text":"impl From&lt;Bool&gt; for LaneType","synthetic":false,"types":[]},{"text":"impl From&lt;Float&gt; for LaneType","synthetic":false,"types":[]},{"text":"impl From&lt;Int&gt; for LaneType","synthetic":false,"types":[]},{"text":"impl From&lt;Flag&gt; for SpecialType","synthetic":false,"types":[]},{"text":"impl From&lt;Reference&gt; for ReferenceType","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["cranelift_codegen_shared"] = [{"text":"impl From&lt;u16&gt; for EncodingBits","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for OpcodePrefix","synthetic":false,"types":[]}];
implementors["cranelift_entity"] = [{"text":"impl&lt;T:&nbsp;ReservedValue&gt; From&lt;T&gt; for PackedOption&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ReservedValue&gt; From&lt;Option&lt;T&gt;&gt; for PackedOption&lt;T&gt;","synthetic":false,"types":[]}];
implementors["cranelift_interpreter"] = [{"text":"impl From&lt;Function&gt; for Environment","synthetic":false,"types":[]},{"text":"impl From&lt;DataValueCastFailure&gt; for Trap","synthetic":false,"types":[]}];
implementors["cranelift_module"] = [{"text":"impl From&lt;FuncId&gt; for ExternalName","synthetic":false,"types":[]},{"text":"impl From&lt;DataId&gt; for ExternalName","synthetic":false,"types":[]},{"text":"impl From&lt;FuncOrDataId&gt; for ExternalName","synthetic":false,"types":[]},{"text":"impl From&lt;CodegenError&gt; for ModuleError","synthetic":false,"types":[]}];
implementors["cranelift_reader"] = [{"text":"impl From&lt;ParseOptionError&gt; for ParseError","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for DataValue","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for DataValue","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for DataValue","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for DataValue","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for DataValue","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for DataValue","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for DataValue","synthetic":false,"types":[]},{"text":"impl From&lt;[u8; 16]&gt; for DataValue","synthetic":false,"types":[]}];
implementors["cranelift_wasm"] = [{"text":"impl From&lt;WasmType&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;BinaryReaderError&gt; for WasmError","synthetic":false,"types":[]}];
implementors["lightbeam"] = [{"text":"impl From&lt;Type&lt;Size&gt;&gt; for Option&lt;GPRType&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Ieee32&gt; for Ieee32","synthetic":false,"types":[]},{"text":"impl From&lt;Ieee64&gt; for Ieee64","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;Ieee32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;Ieee64&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;L&gt; From&lt;L&gt; for BrTarget&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl&lt;L&gt; From&lt;BrTarget&lt;L&gt;&gt; for BrTargetDrop&lt;L&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;MemoryImmediate&gt; for MemoryImmediate","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; From&lt;&amp;'_ T&gt; for OpSig <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Signature,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["peepmatic"] = [{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Optimizations&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Optimization&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Lhs&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Pattern&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a ValueLiteral&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Integer&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Boolean&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a ConditionCode&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Constant&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Variable&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Operation&lt;'a, TOperator, Pattern&lt;'a, TOperator&gt;&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Operation&lt;'a, TOperator, Rhs&lt;'a, TOperator&gt;&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Precondition&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a ConstraintOperand&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Rhs&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, TOperator&gt; From&lt;&amp;'a Unquote&lt;'a, TOperator&gt;&gt; for DynAstRef&lt;'a, TOperator&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for VerifyError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for VerifyError","synthetic":false,"types":[]}];
implementors["peepmatic_runtime"] = [{"text":"impl From&lt;Box&lt;ErrorInner&gt;&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;ErrorKind&gt;&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;IntegerId&gt; for NonZeroU32","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; From&lt;Constant&gt; for Part&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Copy + Debug + Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; From&lt;ConditionCode&gt; for Part&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Copy + Debug + Eq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;UnquoteOperator&gt; for u32","synthetic":false,"types":[]},{"text":"impl From&lt;UnquoteOperator&gt; for NonZeroU32","synthetic":false,"types":[]}];
implementors["peepmatic_test"] = [{"text":"impl From&lt;Constant&gt; for Immediate","synthetic":false,"types":[]},{"text":"impl From&lt;ConditionCode&gt; for Immediate","synthetic":false,"types":[]},{"text":"impl From&lt;Immediate&gt; for Part&lt;Instruction&gt;","synthetic":false,"types":[]}];
implementors["peepmatic_test_operator"] = [{"text":"impl From&lt;TestOperator&gt; for u32","synthetic":false,"types":[]},{"text":"impl From&lt;TestOperator&gt; for NonZeroU32","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl From&lt;Span&gt; for Span","synthetic":false,"types":[]},{"text":"impl From&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl From&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl From&lt;TokenTree&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl From&lt;Group&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Ident&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Punct&gt; for TokenTree","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for TokenTree","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl From&lt;SelfValue&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;SelfType&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Super&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Crate&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Extern&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Underscore&gt; for Ident","synthetic":false,"types":[]},{"text":"impl From&lt;Path&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;MetaList&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;MetaNameValue&gt; for Meta","synthetic":false,"types":[]},{"text":"impl From&lt;Meta&gt; for NestedMeta","synthetic":false,"types":[]},{"text":"impl From&lt;Lit&gt; for NestedMeta","synthetic":false,"types":[]},{"text":"impl From&lt;FieldsNamed&gt; for Fields","synthetic":false,"types":[]},{"text":"impl From&lt;FieldsUnnamed&gt; for Fields","synthetic":false,"types":[]},{"text":"impl From&lt;VisPublic&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;VisCrate&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;VisRestricted&gt; for Visibility","synthetic":false,"types":[]},{"text":"impl From&lt;ExprArray&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAssign&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAssignOp&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAsync&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprAwait&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBinary&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBlock&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBox&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprBreak&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprCall&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprCast&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprClosure&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprContinue&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprField&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprForLoop&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprGroup&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprIf&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprIndex&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLet&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLit&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprLoop&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMacro&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMatch&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprMethodCall&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprParen&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprPath&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprRange&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprReference&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprRepeat&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprReturn&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprStruct&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTry&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTryBlock&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprTuple&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprType&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprUnary&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprUnsafe&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprWhile&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;ExprYield&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Index","synthetic":false,"types":[]},{"text":"impl From&lt;TypeParam&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;LifetimeDef&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;ConstParam&gt; for GenericParam","synthetic":false,"types":[]},{"text":"impl From&lt;Ident&gt; for TypeParam","synthetic":false,"types":[]},{"text":"impl From&lt;TraitBound&gt; for TypeParamBound","synthetic":false,"types":[]},{"text":"impl From&lt;Lifetime&gt; for TypeParamBound","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateType&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateLifetime&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateEq&gt; for WherePredicate","synthetic":false,"types":[]},{"text":"impl From&lt;ItemConst&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemEnum&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemExternCrate&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemFn&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemForeignMod&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemImpl&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMacro&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMacro2&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemMod&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStatic&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStruct&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemTrait&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemTraitAlias&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemType&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUnion&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUse&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;DeriveInput&gt; for Item","synthetic":false,"types":[]},{"text":"impl From&lt;ItemStruct&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;ItemEnum&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;ItemUnion&gt; for DeriveInput","synthetic":false,"types":[]},{"text":"impl From&lt;UsePath&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseName&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseRename&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseGlob&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;UseGroup&gt; for UseTree","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemFn&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemStatic&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemType&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;ForeignItemMacro&gt; for ForeignItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemConst&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemMethod&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemType&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;TraitItemMacro&gt; for TraitItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemConst&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemMethod&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemType&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;ImplItemMacro&gt; for ImplItem","synthetic":false,"types":[]},{"text":"impl From&lt;Receiver&gt; for FnArg","synthetic":false,"types":[]},{"text":"impl From&lt;PatType&gt; for FnArg","synthetic":false,"types":[]},{"text":"impl From&lt;LitStr&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitByteStr&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitByte&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitChar&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitInt&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitFloat&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;LitBool&gt; for Lit","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for LitInt","synthetic":false,"types":[]},{"text":"impl From&lt;Literal&gt; for LitFloat","synthetic":false,"types":[]},{"text":"impl From&lt;DataStruct&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;DataEnum&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;DataUnion&gt; for Data","synthetic":false,"types":[]},{"text":"impl From&lt;TypeArray&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeBareFn&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeGroup&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeImplTrait&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeInfer&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeMacro&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeNever&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeParen&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypePath&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypePtr&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeReference&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeSlice&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeTraitObject&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;TypeTuple&gt; for Type","synthetic":false,"types":[]},{"text":"impl From&lt;PatBox&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatIdent&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatLit&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatMacro&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatOr&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatPath&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatRange&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatReference&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatRest&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatSlice&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatStruct&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatTuple&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatTupleStruct&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatType&gt; for Pat","synthetic":false,"types":[]},{"text":"impl From&lt;PatWild&gt; for Pat","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Path <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;PathSegment&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for PathSegment <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;Ident&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;LexError&gt; for Error","synthetic":false,"types":[]}];
implementors["wasi_common"] = [{"text":"impl From&lt;Error&gt; for WasiCtxBuilderError","synthetic":false,"types":[]},{"text":"impl From&lt;GuestError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;TryFromIntError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Utf8Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Infallible&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;FileType&gt; for Filetype","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for WasiError","synthetic":false,"types":[]},{"text":"impl From&lt;Infallible&gt; for WasiError","synthetic":false,"types":[]},{"text":"impl From&lt;TryFromIntError&gt; for WasiError","synthetic":false,"types":[]},{"text":"impl From&lt;Utf8Error&gt; for WasiError","synthetic":false,"types":[]},{"text":"impl From&lt;Clockid&gt; for ClockId","synthetic":false,"types":[]},{"text":"impl From&lt;Fdflags&gt; for OFlags","synthetic":false,"types":[]},{"text":"impl From&lt;OFlags&gt; for Fdflags","synthetic":false,"types":[]},{"text":"impl From&lt;Oflags&gt; for OFlags","synthetic":false,"types":[]},{"text":"impl From&lt;FileType&gt; for Filetype","synthetic":false,"types":[]},{"text":"impl From&lt;Lookupflags&gt; for AtFlags","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8&gt;&gt; for ReadPipe&lt;Cursor&lt;Vec&lt;u8&gt;&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ [u8]&gt; for ReadPipe&lt;Cursor&lt;Vec&lt;u8&gt;&gt;&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for ReadPipe&lt;Cursor&lt;String&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ str&gt; for ReadPipe&lt;Cursor&lt;String&gt;&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Clockid&gt; for u32","synthetic":false,"types":[]},{"text":"impl From&lt;Clockid&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Errno&gt; for u16","synthetic":false,"types":[]},{"text":"impl From&lt;Errno&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Rights&gt; for u64","synthetic":false,"types":[]},{"text":"impl From&lt;Rights&gt; for i64","synthetic":false,"types":[]},{"text":"impl From&lt;Fd&gt; for u32","synthetic":false,"types":[]},{"text":"impl From&lt;Fd&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Fd","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Fd","synthetic":false,"types":[]},{"text":"impl From&lt;Whence&gt; for u8","synthetic":false,"types":[]},{"text":"impl From&lt;Whence&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Filetype&gt; for u8","synthetic":false,"types":[]},{"text":"impl From&lt;Filetype&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Advice&gt; for u8","synthetic":false,"types":[]},{"text":"impl From&lt;Advice&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Fdflags&gt; for u16","synthetic":false,"types":[]},{"text":"impl From&lt;Fdflags&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Fstflags&gt; for u16","synthetic":false,"types":[]},{"text":"impl From&lt;Fstflags&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Lookupflags&gt; for u32","synthetic":false,"types":[]},{"text":"impl From&lt;Lookupflags&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Oflags&gt; for u16","synthetic":false,"types":[]},{"text":"impl From&lt;Oflags&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Eventtype&gt; for u8","synthetic":false,"types":[]},{"text":"impl From&lt;Eventtype&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Eventrwflags&gt; for u16","synthetic":false,"types":[]},{"text":"impl From&lt;Eventrwflags&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Subclockflags&gt; for u16","synthetic":false,"types":[]},{"text":"impl From&lt;Subclockflags&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Signal&gt; for u8","synthetic":false,"types":[]},{"text":"impl From&lt;Signal&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Riflags&gt; for u16","synthetic":false,"types":[]},{"text":"impl From&lt;Riflags&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Roflags&gt; for u16","synthetic":false,"types":[]},{"text":"impl From&lt;Roflags&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Sdflags&gt; for u8","synthetic":false,"types":[]},{"text":"impl From&lt;Sdflags&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Preopentype&gt; for u8","synthetic":false,"types":[]},{"text":"impl From&lt;Preopentype&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Errno","synthetic":false,"types":[]},{"text":"impl From&lt;GuestError&gt; for Errno","synthetic":false,"types":[]}];
implementors["wasmtime"] = [{"text":"impl From&lt;Func&gt; for Extern","synthetic":false,"types":[]},{"text":"impl From&lt;Global&gt; for Extern","synthetic":false,"types":[]},{"text":"impl From&lt;Memory&gt; for Extern","synthetic":false,"types":[]},{"text":"impl From&lt;Table&gt; for Extern","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Trap","synthetic":false,"types":[]},{"text":"impl From&lt;Box&lt;dyn Error + 'static + Sync + Send&gt;&gt; for Trap","synthetic":false,"types":[]},{"text":"impl From&lt;FuncType&gt; for ExternType","synthetic":false,"types":[]},{"text":"impl From&lt;GlobalType&gt; for ExternType","synthetic":false,"types":[]},{"text":"impl From&lt;MemoryType&gt; for ExternType","synthetic":false,"types":[]},{"text":"impl From&lt;TableType&gt; for ExternType","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Val","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for Val","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for Val","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for Val","synthetic":false,"types":[]},{"text":"impl From&lt;ExternRef&gt; for Val","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;ExternRef&gt;&gt; for Val","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;Func&gt;&gt; for Val","synthetic":false,"types":[]},{"text":"impl From&lt;Func&gt; for Val","synthetic":false,"types":[]}];
implementors["wasmtime_environ"] = [{"text":"impl From&lt;WasmError&gt; for CompileError","synthetic":false,"types":[]}];
implementors["wasmtime_jit"] = [{"text":"impl From&lt;CompileError&gt; for SetupError","synthetic":false,"types":[]},{"text":"impl From&lt;InstantiationError&gt; for SetupError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for SetupError","synthetic":false,"types":[]}];
implementors["wasmtime_runtime"] = [{"text":"impl From&lt;ExportFunction&gt; for Export","synthetic":false,"types":[]},{"text":"impl From&lt;ExportTable&gt; for Export","synthetic":false,"types":[]},{"text":"impl From&lt;ExportMemory&gt; for Export","synthetic":false,"types":[]},{"text":"impl From&lt;ExportGlobal&gt; for Export","synthetic":false,"types":[]},{"text":"impl From&lt;LinkError&gt; for InstantiationError","synthetic":false,"types":[]},{"text":"impl From&lt;*mut VMCallerCheckedAnyfunc&gt; for TableElement","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;VMExternRef&gt;&gt; for TableElement","synthetic":false,"types":[]},{"text":"impl From&lt;VMExternRef&gt; for TableElement","synthetic":false,"types":[]}];
implementors["wiggle"] = [{"text":"impl From&lt;Utf8Error&gt; for GuestError","synthetic":false,"types":[]},{"text":"impl From&lt;TryFromIntError&gt; for GuestError","synthetic":false,"types":[]}];
implementors["wiggle_test"] = [{"text":"impl&lt;R&gt; From&lt;R&gt; for MemAreas <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;[MemArea]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["witx"] = [{"text":"impl&lt;'_&gt; From&lt;&amp;'_ str&gt; for Id","synthetic":false,"types":[]},{"text":"impl From&lt;IntRepr&gt; for AtomType","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for WitxError","synthetic":false,"types":[]},{"text":"impl From&lt;ValidationError&gt; for WitxError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()