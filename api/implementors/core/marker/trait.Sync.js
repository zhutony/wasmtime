(function() {var implementors = {};
implementors["clif_json"] = [{"text":"impl Sync for SerInst","synthetic":true,"types":[]},{"text":"impl Sync for SerBlock","synthetic":true,"types":[]},{"text":"impl Sync for SerDataFlowGraph","synthetic":true,"types":[]},{"text":"impl Sync for SerSignature","synthetic":true,"types":[]},{"text":"impl Sync for SerFunction","synthetic":true,"types":[]},{"text":"impl Sync for SerObj","synthetic":true,"types":[]},{"text":"impl Sync for SerInstData","synthetic":true,"types":[]}];
implementors["clif_util"] = [{"text":"impl Sync for TestOptions","synthetic":true,"types":[]},{"text":"impl Sync for PassOptions","synthetic":true,"types":[]},{"text":"impl Sync for CompiledWithoutSupportOptions","synthetic":true,"types":[]},{"text":"impl Sync for Commands","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for RemoveInst","synthetic":true,"types":[]},{"text":"impl Sync for ReplaceInstWithConst","synthetic":true,"types":[]},{"text":"impl Sync for ReplaceInstWithTrap","synthetic":true,"types":[]},{"text":"impl Sync for MoveInstToEntryBlock","synthetic":true,"types":[]},{"text":"impl Sync for RemoveBlock","synthetic":true,"types":[]},{"text":"impl Sync for ReplaceBlockParamWithConst","synthetic":true,"types":[]},{"text":"impl Sync for RemoveUnusedEntities","synthetic":true,"types":[]},{"text":"impl Sync for MergeBlocks","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CrashCheckContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ProgressStatus","synthetic":true,"types":[]},{"text":"impl Sync for CheckResult","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for PrintRelocs","synthetic":true,"types":[]},{"text":"impl Sync for PrintTraps","synthetic":true,"types":[]},{"text":"impl Sync for PrintStackMaps","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for FileInterpreter","synthetic":true,"types":[]},{"text":"impl Sync for FileInterpreterFailure","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for OwnedFlagsOrIsa","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]}];
implementors["cranelift_bforest"] = [{"text":"impl&lt;K, V&gt; Sync for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, C&gt; Sync for MapCursor&lt;'a, K, V, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for MapForest&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for MapIter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for Set&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C&gt; Sync for SetCursor&lt;'a, K, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for SetForest&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Sync for SetIter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_codegen"] = [{"text":"impl !Sync for Context","synthetic":true,"types":[]},{"text":"impl Sync for ValueLocRange","synthetic":true,"types":[]},{"text":"impl Sync for CodegenError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for MemoryCodeSink&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for NullRelocSink","synthetic":true,"types":[]},{"text":"impl Sync for NullStackMapSink","synthetic":true,"types":[]},{"text":"impl Sync for NullTrapSink","synthetic":true,"types":[]},{"text":"impl Sync for StackMap","synthetic":true,"types":[]},{"text":"impl Sync for RegDiversions","synthetic":true,"types":[]},{"text":"impl Sync for CodeInfo","synthetic":true,"types":[]},{"text":"impl Sync for Reloc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CFGPrinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Sync for FuncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Sync for EncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CursorPosition","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for DisplayList&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DominatorTree","synthetic":true,"types":[]},{"text":"impl Sync for DominatorTreePreorder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ChildIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BlockPredecessor","synthetic":true,"types":[]},{"text":"impl Sync for ControlFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PredIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f, IIB&gt; Sync for InsertBuilder&lt;'f, IIB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IIB: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Sync for ReplaceBuilder&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AbiParam","synthetic":true,"types":[]},{"text":"impl Sync for ExtFuncData","synthetic":true,"types":[]},{"text":"impl Sync for Signature","synthetic":true,"types":[]},{"text":"impl Sync for HeapData","synthetic":true,"types":[]},{"text":"impl Sync for MemFlags","synthetic":true,"types":[]},{"text":"impl Sync for ProgramPoint","synthetic":true,"types":[]},{"text":"impl Sync for SourceLoc","synthetic":true,"types":[]},{"text":"impl Sync for TableData","synthetic":true,"types":[]},{"text":"impl Sync for ValueLabel","synthetic":true,"types":[]},{"text":"impl Sync for ValueLabelStart","synthetic":true,"types":[]},{"text":"impl Sync for AtomicRmwOp","synthetic":true,"types":[]},{"text":"impl Sync for ArgumentExtension","synthetic":true,"types":[]},{"text":"impl Sync for ArgumentPurpose","synthetic":true,"types":[]},{"text":"impl Sync for ExternalName","synthetic":true,"types":[]},{"text":"impl Sync for GlobalValueData","synthetic":true,"types":[]},{"text":"impl Sync for HeapStyle","synthetic":true,"types":[]},{"text":"impl Sync for LibCall","synthetic":true,"types":[]},{"text":"impl Sync for ExpandedProgramPoint","synthetic":true,"types":[]},{"text":"impl Sync for TrapCode","synthetic":true,"types":[]},{"text":"impl Sync for ArgumentLoc","synthetic":true,"types":[]},{"text":"impl Sync for ValueLoc","synthetic":true,"types":[]},{"text":"impl Sync for ValueLabelAssignments","synthetic":true,"types":[]},{"text":"impl Sync for ConstantData","synthetic":true,"types":[]},{"text":"impl Sync for ConstantPoolEntry","synthetic":true,"types":[]},{"text":"impl Sync for ConstantPool","synthetic":true,"types":[]},{"text":"impl Sync for DataFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DisplayInst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ValueDef","synthetic":true,"types":[]},{"text":"impl Sync for Block","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl Sync for Inst","synthetic":true,"types":[]},{"text":"impl Sync for StackSlot","synthetic":true,"types":[]},{"text":"impl Sync for GlobalValue","synthetic":true,"types":[]},{"text":"impl Sync for Constant","synthetic":true,"types":[]},{"text":"impl Sync for Immediate","synthetic":true,"types":[]},{"text":"impl Sync for JumpTable","synthetic":true,"types":[]},{"text":"impl Sync for FuncRef","synthetic":true,"types":[]},{"text":"impl Sync for SigRef","synthetic":true,"types":[]},{"text":"impl Sync for Heap","synthetic":true,"types":[]},{"text":"impl Sync for Table","synthetic":true,"types":[]},{"text":"impl Sync for AnyEntity","synthetic":true,"types":[]},{"text":"impl Sync for Function","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DisplayFunctionAnnotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DisplayFunction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for InstOffsetIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Imm64","synthetic":true,"types":[]},{"text":"impl Sync for Uimm64","synthetic":true,"types":[]},{"text":"impl Sync for Uimm32","synthetic":true,"types":[]},{"text":"impl Sync for V128Imm","synthetic":true,"types":[]},{"text":"impl Sync for Offset32","synthetic":true,"types":[]},{"text":"impl Sync for Ieee32","synthetic":true,"types":[]},{"text":"impl Sync for Ieee64","synthetic":true,"types":[]},{"text":"impl Sync for VariableArgs","synthetic":true,"types":[]},{"text":"impl Sync for OpcodeConstraints","synthetic":true,"types":[]},{"text":"impl Sync for ValueTypeSet","synthetic":true,"types":[]},{"text":"impl Sync for InstructionFormat","synthetic":true,"types":[]},{"text":"impl Sync for InstructionData","synthetic":true,"types":[]},{"text":"impl Sync for Opcode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BranchInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CallInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ResolvedConstraint","synthetic":true,"types":[]},{"text":"impl Sync for JumpTableData","synthetic":true,"types":[]},{"text":"impl Sync for Layout","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Sync for Blocks&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Sync for Insts&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Sync for StackSlotData","synthetic":true,"types":[]},{"text":"impl Sync for StackLayoutInfo","synthetic":true,"types":[]},{"text":"impl Sync for StackSlots","synthetic":true,"types":[]},{"text":"impl Sync for StackSlotKind","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for BranchRange","synthetic":true,"types":[]},{"text":"impl Sync for OperandConstraint","synthetic":true,"types":[]},{"text":"impl Sync for RecipeConstraints","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Encodings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EncInfo","synthetic":true,"types":[]},{"text":"impl Sync for Encoding","synthetic":true,"types":[]},{"text":"impl Sync for StackBaseMask","synthetic":true,"types":[]},{"text":"impl Sync for StackRef","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for TargetFrontendConfig","synthetic":true,"types":[]},{"text":"impl Sync for CallConv","synthetic":true,"types":[]},{"text":"impl Sync for ConstraintKind","synthetic":true,"types":[]},{"text":"impl Sync for StackBase","synthetic":true,"types":[]},{"text":"impl Sync for LookupError","synthetic":true,"types":[]},{"text":"impl Sync for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Sync for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Sync for RegisterMappingError","synthetic":true,"types":[]},{"text":"impl Sync for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Sync for RegBank","synthetic":true,"types":[]},{"text":"impl Sync for RegClassData","synthetic":true,"types":[]},{"text":"impl Sync for RegClassIndex","synthetic":true,"types":[]},{"text":"impl Sync for RegInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DisplayRegUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Loop","synthetic":true,"types":[]},{"text":"impl Sync for LoopAnalysis","synthetic":true,"types":[]},{"text":"impl Sync for MachCompileResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MachTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for InstColor","synthetic":true,"types":[]},{"text":"impl Sync for LowerInput","synthetic":true,"types":[]},{"text":"impl&lt;'func, I&gt; !Sync for Lower&lt;'func, I&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RelocDistance","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for VCode&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for VCodeBuilder&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BlockLoweringOrder","synthetic":true,"types":[]},{"text":"impl Sync for LoweredBlock","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Sync for ABICalleeImpl&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as ABIMachineSpec&gt;::I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Sync for ABICallerImpl&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ABIArg","synthetic":true,"types":[]},{"text":"impl Sync for ArgsOrRets","synthetic":true,"types":[]},{"text":"impl Sync for InstIsSafepoint","synthetic":true,"types":[]},{"text":"impl Sync for StackAMode","synthetic":true,"types":[]},{"text":"impl Sync for CallDest","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MachBuffer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as MachInst&gt;::LabelUse: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MachBufferFinalized","synthetic":true,"types":[]},{"text":"impl Sync for MachLabel","synthetic":true,"types":[]},{"text":"impl Sync for MachSrcLoc","synthetic":true,"types":[]},{"text":"impl Sync for MachStackMap","synthetic":true,"types":[]},{"text":"impl Sync for StackMapExtent","synthetic":true,"types":[]},{"text":"impl Sync for TargetIsaAdapter","synthetic":true,"types":[]},{"text":"impl Sync for AtomicRmwOp","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PredicateView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FlagsOrIsa&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SetError","synthetic":true,"types":[]},{"text":"impl Sync for Regalloc","synthetic":true,"types":[]},{"text":"impl Sync for OptLevel","synthetic":true,"types":[]},{"text":"impl Sync for TlsModel","synthetic":true,"types":[]},{"text":"impl Sync for LibcallCallConv","synthetic":true,"types":[]},{"text":"impl Sync for Template","synthetic":true,"types":[]},{"text":"impl Sync for Descriptor","synthetic":true,"types":[]},{"text":"impl Sync for Detail","synthetic":true,"types":[]},{"text":"impl Sync for PassTimes","synthetic":true,"types":[]},{"text":"impl Sync for TimingToken","synthetic":true,"types":[]},{"text":"impl Sync for VerifierError","synthetic":true,"types":[]},{"text":"impl Sync for VerifierErrors","synthetic":true,"types":[]},{"text":"impl Sync for PlainWriter","synthetic":true,"types":[]}];
implementors["cranelift_codegen_meta"] = [{"text":"impl !Sync for Def","synthetic":true,"types":[]},{"text":"impl !Sync for DefPool","synthetic":true,"types":[]},{"text":"impl Sync for DefIndex","synthetic":true,"types":[]},{"text":"impl Sync for Block","synthetic":true,"types":[]},{"text":"impl Sync for BlockPool","synthetic":true,"types":[]},{"text":"impl !Sync for Var","synthetic":true,"types":[]},{"text":"impl Sync for VarIndex","synthetic":true,"types":[]},{"text":"impl !Sync for VarPool","synthetic":true,"types":[]},{"text":"impl Sync for ConstPool","synthetic":true,"types":[]},{"text":"impl !Sync for Apply","synthetic":true,"types":[]},{"text":"impl Sync for DummyVar","synthetic":true,"types":[]},{"text":"impl Sync for DummyConstant","synthetic":true,"types":[]},{"text":"impl !Sync for DummyDef","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Expr","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for PatternPosition","synthetic":true,"types":[]},{"text":"impl !Sync for DummyExpr","synthetic":true,"types":[]},{"text":"impl !Sync for CpuMode","synthetic":true,"types":[]},{"text":"impl !Sync for EncodingContent","synthetic":true,"types":[]},{"text":"impl !Sync for EncodingBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for FormatField","synthetic":true,"types":[]},{"text":"impl !Sync for InstructionFormat","synthetic":true,"types":[]},{"text":"impl Sync for FormatStructure","synthetic":true,"types":[]},{"text":"impl !Sync for InstructionFormatBuilder","synthetic":true,"types":[]},{"text":"impl Sync for OpcodeNumber","synthetic":true,"types":[]},{"text":"impl&lt;'all_inst&gt; !Sync for InstructionGroupBuilder&lt;'all_inst&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for InstructionGroup","synthetic":true,"types":[]},{"text":"impl !Sync for PolymorphicInfo","synthetic":true,"types":[]},{"text":"impl !Sync for InstructionContent","synthetic":true,"types":[]},{"text":"impl !Sync for InstructionBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for BoundInstruction","synthetic":true,"types":[]},{"text":"impl Sync for FormatPredicateNode","synthetic":true,"types":[]},{"text":"impl Sync for InstructionPredicate","synthetic":true,"types":[]},{"text":"impl Sync for InstructionPredicateNumber","synthetic":true,"types":[]},{"text":"impl Sync for InstructionPredicateRegistry","synthetic":true,"types":[]},{"text":"impl Sync for ValueTypeOrAny","synthetic":true,"types":[]},{"text":"impl Sync for BindParameter","synthetic":true,"types":[]},{"text":"impl Sync for Immediate","synthetic":true,"types":[]},{"text":"impl Sync for FormatPredicateKind","synthetic":true,"types":[]},{"text":"impl Sync for TypePredicateNode","synthetic":true,"types":[]},{"text":"impl Sync for InstructionPredicateNode","synthetic":true,"types":[]},{"text":"impl !Sync for InstSpec","synthetic":true,"types":[]},{"text":"impl !Sync for TargetIsa","synthetic":true,"types":[]},{"text":"impl !Sync for Operand","synthetic":true,"types":[]},{"text":"impl !Sync for OperandKind","synthetic":true,"types":[]},{"text":"impl !Sync for OperandKindFields","synthetic":true,"types":[]},{"text":"impl Sync for Register","synthetic":true,"types":[]},{"text":"impl Sync for Stack","synthetic":true,"types":[]},{"text":"impl Sync for BranchRange","synthetic":true,"types":[]},{"text":"impl !Sync for EncodingRecipe","synthetic":true,"types":[]},{"text":"impl Sync for EncodingRecipeNumber","synthetic":true,"types":[]},{"text":"impl !Sync for EncodingRecipeBuilder","synthetic":true,"types":[]},{"text":"impl Sync for OperandConstraint","synthetic":true,"types":[]},{"text":"impl Sync for RegBankIndex","synthetic":true,"types":[]},{"text":"impl Sync for RegBank","synthetic":true,"types":[]},{"text":"impl Sync for RegClassIndex","synthetic":true,"types":[]},{"text":"impl Sync for RegClass","synthetic":true,"types":[]},{"text":"impl Sync for RegClassBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegBankBuilder","synthetic":true,"types":[]},{"text":"impl Sync for IsaRegsBuilder","synthetic":true,"types":[]},{"text":"impl Sync for IsaRegs","synthetic":true,"types":[]},{"text":"impl Sync for RegClassProto","synthetic":true,"types":[]},{"text":"impl Sync for BoolSettingIndex","synthetic":true,"types":[]},{"text":"impl Sync for BoolSetting","synthetic":true,"types":[]},{"text":"impl Sync for Setting","synthetic":true,"types":[]},{"text":"impl Sync for PresetIndex","synthetic":true,"types":[]},{"text":"impl Sync for Preset","synthetic":true,"types":[]},{"text":"impl Sync for SettingGroup","synthetic":true,"types":[]},{"text":"impl Sync for ProtoSetting","synthetic":true,"types":[]},{"text":"impl Sync for ProtoPredicate","synthetic":true,"types":[]},{"text":"impl Sync for Predicate","synthetic":true,"types":[]},{"text":"impl Sync for SettingGroupBuilder","synthetic":true,"types":[]},{"text":"impl Sync for SpecificSetting","synthetic":true,"types":[]},{"text":"impl Sync for PresetType","synthetic":true,"types":[]},{"text":"impl Sync for ProtoSpecificSetting","synthetic":true,"types":[]},{"text":"impl Sync for PredicateNode","synthetic":true,"types":[]},{"text":"impl !Sync for TypeEnvironment","synthetic":true,"types":[]},{"text":"impl !Sync for Constraint","synthetic":true,"types":[]},{"text":"impl Sync for TypeEnvRank","synthetic":true,"types":[]},{"text":"impl Sync for LaneTypeIterator","synthetic":true,"types":[]},{"text":"impl Sync for VectorType","synthetic":true,"types":[]},{"text":"impl Sync for SpecialTypeIterator","synthetic":true,"types":[]},{"text":"impl Sync for ReferenceType","synthetic":true,"types":[]},{"text":"impl Sync for ReferenceTypeIterator","synthetic":true,"types":[]},{"text":"impl Sync for ValueType","synthetic":true,"types":[]},{"text":"impl Sync for LaneType","synthetic":true,"types":[]},{"text":"impl Sync for SpecialType","synthetic":true,"types":[]},{"text":"impl !Sync for TypeVarContent","synthetic":true,"types":[]},{"text":"impl !Sync for TypeVar","synthetic":true,"types":[]},{"text":"impl !Sync for TypeVarParent","synthetic":true,"types":[]},{"text":"impl Sync for TypeSet","synthetic":true,"types":[]},{"text":"impl Sync for TypeSetBuilder","synthetic":true,"types":[]},{"text":"impl Sync for DerivedFunc","synthetic":true,"types":[]},{"text":"impl Sync for Interval","synthetic":true,"types":[]},{"text":"impl !Sync for Transform","synthetic":true,"types":[]},{"text":"impl !Sync for TransformGroup","synthetic":true,"types":[]},{"text":"impl Sync for TransformGroupIndex","synthetic":true,"types":[]},{"text":"impl !Sync for TransformGroupBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for TransformGroups","synthetic":true,"types":[]},{"text":"impl Sync for Formatter","synthetic":true,"types":[]},{"text":"impl Sync for Match","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorInner","synthetic":true,"types":[]},{"text":"impl Sync for Isa","synthetic":true,"types":[]},{"text":"impl&lt;'defs&gt; !Sync for PerCpuModeEncodings&lt;'defs&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for RecipeGroup","synthetic":true,"types":[]},{"text":"impl !Sync for PerCpuModeEncodings","synthetic":true,"types":[]},{"text":"impl&lt;'builder&gt; !Sync for RecipeGroup&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'builder&gt; !Sync for Template&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RecipePrefixKind","synthetic":true,"types":[]},{"text":"impl&lt;'cpu_mode&gt; !Sync for Level1Table&lt;'cpu_mode&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Level2HashTableEntry","synthetic":true,"types":[]},{"text":"impl !Sync for Level2Table","synthetic":true,"types":[]},{"text":"impl Sync for Encoder","synthetic":true,"types":[]},{"text":"impl !Sync for EncodingList","synthetic":true,"types":[]},{"text":"impl Sync for ParentGroup","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SettingOrPreset&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Definitions","synthetic":true,"types":[]},{"text":"impl !Sync for EntityRefs","synthetic":true,"types":[]},{"text":"impl !Sync for Formats","synthetic":true,"types":[]},{"text":"impl !Sync for Immediates","synthetic":true,"types":[]},{"text":"impl Sync for BoolIterator","synthetic":true,"types":[]},{"text":"impl Sync for IntIterator","synthetic":true,"types":[]},{"text":"impl Sync for FloatIterator","synthetic":true,"types":[]},{"text":"impl Sync for FlagIterator","synthetic":true,"types":[]},{"text":"impl Sync for ReferenceIterator","synthetic":true,"types":[]},{"text":"impl Sync for Bool","synthetic":true,"types":[]},{"text":"impl Sync for Int","synthetic":true,"types":[]},{"text":"impl Sync for Float","synthetic":true,"types":[]},{"text":"impl Sync for Flag","synthetic":true,"types":[]},{"text":"impl Sync for Reference","synthetic":true,"types":[]},{"text":"impl&lt;'entries, T&gt; Sync for UniqueTable&lt;'entries, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UniqueSeqTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_codegen_shared"] = [{"text":"impl Sync for IntCC","synthetic":true,"types":[]},{"text":"impl Sync for FloatCC","synthetic":true,"types":[]},{"text":"impl Sync for EncodingBits","synthetic":true,"types":[]},{"text":"impl Sync for OpcodePrefix","synthetic":true,"types":[]}];
implementors["cranelift_entity"] = [{"text":"impl&lt;K, V&gt; Sync for BoxedSlice&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for Keys&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for EntityList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ListPool&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for SecondaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for PrimaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for EntitySet&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for SparseMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PackedOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_filetests"] = [{"text":"impl Sync for SingleFunctionCompiler","synthetic":true,"types":[]}];
implementors["cranelift_frontend"] = [{"text":"impl&lt;'a&gt; Sync for FunctionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FunctionBuilderContext","synthetic":true,"types":[]},{"text":"impl Sync for Switch","synthetic":true,"types":[]},{"text":"impl Sync for Variable","synthetic":true,"types":[]}];
implementors["cranelift_interpreter"] = [{"text":"impl Sync for Environment","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Interpreter","synthetic":true,"types":[]},{"text":"impl Sync for ControlFlow","synthetic":true,"types":[]},{"text":"impl Sync for Trap","synthetic":true,"types":[]}];
implementors["cranelift_module"] = [{"text":"impl Sync for DataContext","synthetic":true,"types":[]},{"text":"impl Sync for DataDescription","synthetic":true,"types":[]},{"text":"impl Sync for DataId","synthetic":true,"types":[]},{"text":"impl Sync for FuncId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Module&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledData: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for ModuleFunction&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for ModuleNamespace&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledData: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TrapSite","synthetic":true,"types":[]},{"text":"impl Sync for Init","synthetic":true,"types":[]},{"text":"impl Sync for FuncOrDataId","synthetic":true,"types":[]},{"text":"impl Sync for Linkage","synthetic":true,"types":[]},{"text":"impl Sync for ModuleError","synthetic":true,"types":[]}];
implementors["cranelift_object"] = [{"text":"impl !Sync for ObjectBackend","synthetic":true,"types":[]},{"text":"impl !Sync for ObjectBuilder","synthetic":true,"types":[]},{"text":"impl Sync for ObjectProduct","synthetic":true,"types":[]}];
implementors["cranelift_reader"] = [{"text":"impl Sync for Location","synthetic":true,"types":[]},{"text":"impl Sync for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Invocation","synthetic":true,"types":[]},{"text":"impl Sync for SourceMap","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TestCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Comment&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Details&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TestFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IsaSpec","synthetic":true,"types":[]},{"text":"impl Sync for ParseOptionError","synthetic":true,"types":[]},{"text":"impl Sync for Comparison","synthetic":true,"types":[]},{"text":"impl Sync for DataValue","synthetic":true,"types":[]},{"text":"impl Sync for DataValueCastFailure","synthetic":true,"types":[]},{"text":"impl Sync for RunCommand","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TestOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Feature&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["cranelift_simplejit"] = [{"text":"impl !Sync for SimpleJITBackend","synthetic":true,"types":[]},{"text":"impl !Sync for SimpleJITBuilder","synthetic":true,"types":[]}];
implementors["cranelift_wasm"] = [{"text":"impl Sync for DummyEnvironment","synthetic":true,"types":[]},{"text":"impl Sync for WasmFuncType","synthetic":true,"types":[]},{"text":"impl Sync for FuncTranslator","synthetic":true,"types":[]},{"text":"impl Sync for FuncTranslationState","synthetic":true,"types":[]},{"text":"impl Sync for ModuleTranslationState","synthetic":true,"types":[]},{"text":"impl Sync for DataIndex","synthetic":true,"types":[]},{"text":"impl Sync for DefinedFuncIndex","synthetic":true,"types":[]},{"text":"impl Sync for DefinedGlobalIndex","synthetic":true,"types":[]},{"text":"impl Sync for DefinedMemoryIndex","synthetic":true,"types":[]},{"text":"impl Sync for DefinedTableIndex","synthetic":true,"types":[]},{"text":"impl Sync for ElemIndex","synthetic":true,"types":[]},{"text":"impl Sync for FuncIndex","synthetic":true,"types":[]},{"text":"impl Sync for Global","synthetic":true,"types":[]},{"text":"impl Sync for GlobalIndex","synthetic":true,"types":[]},{"text":"impl Sync for Memory","synthetic":true,"types":[]},{"text":"impl Sync for MemoryIndex","synthetic":true,"types":[]},{"text":"impl Sync for SignatureIndex","synthetic":true,"types":[]},{"text":"impl Sync for Table","synthetic":true,"types":[]},{"text":"impl Sync for TableIndex","synthetic":true,"types":[]},{"text":"impl Sync for GlobalVariable","synthetic":true,"types":[]},{"text":"impl Sync for ReturnMode","synthetic":true,"types":[]},{"text":"impl Sync for WasmError","synthetic":true,"types":[]},{"text":"impl Sync for WasmType","synthetic":true,"types":[]},{"text":"impl Sync for GlobalInit","synthetic":true,"types":[]},{"text":"impl Sync for TableElementType","synthetic":true,"types":[]}];
implementors["lightbeam"] = [{"text":"impl&lt;'module, M&gt; Sync for CodeGenSession&lt;'module, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for NullOffsetSink","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Sinks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ExecutableModule","synthetic":true,"types":[]},{"text":"impl Sync for TranslatedModule","synthetic":true,"types":[]},{"text":"impl Sync for ExecutionError","synthetic":true,"types":[]},{"text":"impl Sync for Ieee32","synthetic":true,"types":[]},{"text":"impl Sync for Ieee64","synthetic":true,"types":[]},{"text":"impl Sync for SignfulInt","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Sync for BrTable&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Sync for BrTargetDrop&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MemoryImmediate","synthetic":true,"types":[]},{"text":"impl&lt;'a, M&gt; Sync for MicrowasmConv&lt;'a, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for OpSig","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl Sync for Signedness","synthetic":true,"types":[]},{"text":"impl Sync for Size","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Type&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for NameTag","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Sync for BrTarget&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Label&gt; Sync for Operator&lt;Label&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Label: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["peepmatic"] = [{"text":"impl&lt;'a, TOperator&gt; !Sync for Optimizations&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for Optimization&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for Lhs&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for Integer&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for Boolean&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Sync for ConditionCode&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Sync for Constant&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Sync for Variable&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator, TOperand&gt; !Sync for Operation&lt;'a, TOperator, TOperand&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for Precondition&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for Unquote&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for Dfs&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl Sync for VerifyError","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for DynAstRef&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for Pattern&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for ValueLiteral&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Constraint","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for ConstraintOperand&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Sync for Rhs&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TraversalEvent","synthetic":true,"types":[]}];
implementors["peepmatic_automata"] = [{"text":"impl&lt;TAlphabet, TState, TOutput&gt; Sync for Builder&lt;TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl&lt;'a, TAlphabet, TState, TOutput&gt; Sync for InsertionBuilder&lt;'a, TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TAlphabet, TState, TOutput&gt; Sync for Automaton&lt;TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TAlphabet, TState, TOutput&gt; Sync for Query&lt;'a, TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DebugDotFmt","synthetic":true,"types":[]},{"text":"impl Sync for DisplayDotFmt","synthetic":true,"types":[]}];
implementors["peepmatic_runtime"] = [{"text":"impl Sync for ConditionCode","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for IntegerId","synthetic":true,"types":[]},{"text":"impl Sync for IntegerInterner","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; !Sync for Optimizations&lt;TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; Sync for Optimization&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Else","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; Sync for Increment&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LhsId","synthetic":true,"types":[]},{"text":"impl Sync for RhsId","synthetic":true,"types":[]},{"text":"impl Sync for MatchOp","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; Sync for Action&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; !Sync for PeepholeOptimizations&lt;TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'peep, 'ctx, TInstructionSet&gt; !Sync for PeepholeOptimizer&lt;'peep, 'ctx, TInstructionSet&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Constant","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Part&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Path&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PathId","synthetic":true,"types":[]},{"text":"impl !Sync for PathInterner","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for BitWidth","synthetic":true,"types":[]},{"text":"impl Sync for Kind","synthetic":true,"types":[]},{"text":"impl Sync for UnquoteOperator","synthetic":true,"types":[]}];
implementors["peepmatic_test"] = [{"text":"impl Sync for Instruction","synthetic":true,"types":[]},{"text":"impl Sync for InstructionData","synthetic":true,"types":[]},{"text":"impl !Sync for Program","synthetic":true,"types":[]},{"text":"impl Sync for TestIsa","synthetic":true,"types":[]},{"text":"impl Sync for Immediate","synthetic":true,"types":[]}];
implementors["peepmatic_test_operator"] = [{"text":"impl Sync for TestOperator","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Sync for TokenStream","synthetic":true,"types":[]},{"text":"impl !Sync for LexError","synthetic":true,"types":[]},{"text":"impl !Sync for Span","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for Punct","synthetic":true,"types":[]},{"text":"impl !Sync for Ident","synthetic":true,"types":[]},{"text":"impl !Sync for Literal","synthetic":true,"types":[]},{"text":"impl !Sync for TokenTree","synthetic":true,"types":[]},{"text":"impl Sync for Delimiter","synthetic":true,"types":[]},{"text":"impl Sync for Spacing","synthetic":true,"types":[]},{"text":"impl !Sync for IntoIter","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Sync for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Sync for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Sync for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Sync for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Sync for Attribute","synthetic":true,"types":[]},{"text":"impl !Sync for MetaList","synthetic":true,"types":[]},{"text":"impl !Sync for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Sync for Field","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Sync for Variant","synthetic":true,"types":[]},{"text":"impl !Sync for VisCrate","synthetic":true,"types":[]},{"text":"impl !Sync for VisPublic","synthetic":true,"types":[]},{"text":"impl !Sync for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Sync for Arm","synthetic":true,"types":[]},{"text":"impl !Sync for FieldValue","synthetic":true,"types":[]},{"text":"impl !Sync for Label","synthetic":true,"types":[]},{"text":"impl !Sync for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Sync for ExprArray","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBox","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCast","synthetic":true,"types":[]},{"text":"impl !Sync for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Sync for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Sync for ExprField","synthetic":true,"types":[]},{"text":"impl !Sync for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIf","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLet","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLit","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprParen","synthetic":true,"types":[]},{"text":"impl !Sync for ExprPath","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRange","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReference","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Sync for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTry","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Sync for ExprType","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Sync for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Sync for ExprYield","synthetic":true,"types":[]},{"text":"impl !Sync for Index","synthetic":true,"types":[]},{"text":"impl !Sync for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Sync for ConstParam","synthetic":true,"types":[]},{"text":"impl !Sync for Generics","synthetic":true,"types":[]},{"text":"impl !Sync for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateType","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBound","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParam","synthetic":true,"types":[]},{"text":"impl !Sync for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Sync for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Sync for ItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Sync for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMod","synthetic":true,"types":[]},{"text":"impl !Sync for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Sync for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Sync for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Sync for ItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Sync for ItemUse","synthetic":true,"types":[]},{"text":"impl !Sync for Receiver","synthetic":true,"types":[]},{"text":"impl !Sync for Signature","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Sync for UseGlob","synthetic":true,"types":[]},{"text":"impl !Sync for UseGroup","synthetic":true,"types":[]},{"text":"impl !Sync for UseName","synthetic":true,"types":[]},{"text":"impl !Sync for UsePath","synthetic":true,"types":[]},{"text":"impl !Sync for UseRename","synthetic":true,"types":[]},{"text":"impl !Sync for File","synthetic":true,"types":[]},{"text":"impl !Sync for Lifetime","synthetic":true,"types":[]},{"text":"impl !Sync for LitBool","synthetic":true,"types":[]},{"text":"impl !Sync for LitByte","synthetic":true,"types":[]},{"text":"impl !Sync for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Sync for LitChar","synthetic":true,"types":[]},{"text":"impl !Sync for LitFloat","synthetic":true,"types":[]},{"text":"impl !Sync for LitInt","synthetic":true,"types":[]},{"text":"impl !Sync for LitStr","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for DataEnum","synthetic":true,"types":[]},{"text":"impl !Sync for DataStruct","synthetic":true,"types":[]},{"text":"impl !Sync for DataUnion","synthetic":true,"types":[]},{"text":"impl !Sync for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Sync for Block","synthetic":true,"types":[]},{"text":"impl !Sync for Local","synthetic":true,"types":[]},{"text":"impl !Sync for Abi","synthetic":true,"types":[]},{"text":"impl !Sync for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Sync for TypeArray","synthetic":true,"types":[]},{"text":"impl !Sync for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Sync for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Sync for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Sync for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Sync for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TypeNever","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParen","synthetic":true,"types":[]},{"text":"impl !Sync for TypePath","synthetic":true,"types":[]},{"text":"impl !Sync for TypePtr","synthetic":true,"types":[]},{"text":"impl !Sync for TypeReference","synthetic":true,"types":[]},{"text":"impl !Sync for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Sync for Variadic","synthetic":true,"types":[]},{"text":"impl !Sync for FieldPat","synthetic":true,"types":[]},{"text":"impl !Sync for PatBox","synthetic":true,"types":[]},{"text":"impl !Sync for PatIdent","synthetic":true,"types":[]},{"text":"impl !Sync for PatLit","synthetic":true,"types":[]},{"text":"impl !Sync for PatMacro","synthetic":true,"types":[]},{"text":"impl !Sync for PatOr","synthetic":true,"types":[]},{"text":"impl !Sync for PatPath","synthetic":true,"types":[]},{"text":"impl !Sync for PatRange","synthetic":true,"types":[]},{"text":"impl !Sync for PatReference","synthetic":true,"types":[]},{"text":"impl !Sync for PatRest","synthetic":true,"types":[]},{"text":"impl !Sync for PatSlice","synthetic":true,"types":[]},{"text":"impl !Sync for PatStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatTuple","synthetic":true,"types":[]},{"text":"impl !Sync for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatType","synthetic":true,"types":[]},{"text":"impl !Sync for PatWild","synthetic":true,"types":[]},{"text":"impl !Sync for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Binding","synthetic":true,"types":[]},{"text":"impl !Sync for Constraint","synthetic":true,"types":[]},{"text":"impl !Sync for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Path","synthetic":true,"types":[]},{"text":"impl !Sync for PathSegment","synthetic":true,"types":[]},{"text":"impl !Sync for QSelf","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl !Sync for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for Meta","synthetic":true,"types":[]},{"text":"impl !Sync for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Sync for Fields","synthetic":true,"types":[]},{"text":"impl !Sync for Visibility","synthetic":true,"types":[]},{"text":"impl !Sync for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Sync for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Sync for Expr","synthetic":true,"types":[]},{"text":"impl !Sync for Member","synthetic":true,"types":[]},{"text":"impl !Sync for GenericParam","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Sync for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Sync for FnArg","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItem","synthetic":true,"types":[]},{"text":"impl !Sync for Item","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItem","synthetic":true,"types":[]},{"text":"impl !Sync for UseTree","synthetic":true,"types":[]},{"text":"impl !Sync for Lit","synthetic":true,"types":[]},{"text":"impl Sync for StrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Sync for Data","synthetic":true,"types":[]},{"text":"impl !Sync for BinOp","synthetic":true,"types":[]},{"text":"impl !Sync for UnOp","synthetic":true,"types":[]},{"text":"impl !Sync for Stmt","synthetic":true,"types":[]},{"text":"impl !Sync for ReturnType","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Pat","synthetic":true,"types":[]},{"text":"impl !Sync for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Sync for PathArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Underscore","synthetic":true,"types":[]},{"text":"impl !Sync for Abstract","synthetic":true,"types":[]},{"text":"impl !Sync for As","synthetic":true,"types":[]},{"text":"impl !Sync for Async","synthetic":true,"types":[]},{"text":"impl !Sync for Auto","synthetic":true,"types":[]},{"text":"impl !Sync for Await","synthetic":true,"types":[]},{"text":"impl !Sync for Become","synthetic":true,"types":[]},{"text":"impl !Sync for Box","synthetic":true,"types":[]},{"text":"impl !Sync for Break","synthetic":true,"types":[]},{"text":"impl !Sync for Const","synthetic":true,"types":[]},{"text":"impl !Sync for Continue","synthetic":true,"types":[]},{"text":"impl !Sync for Crate","synthetic":true,"types":[]},{"text":"impl !Sync for Default","synthetic":true,"types":[]},{"text":"impl !Sync for Do","synthetic":true,"types":[]},{"text":"impl !Sync for Dyn","synthetic":true,"types":[]},{"text":"impl !Sync for Else","synthetic":true,"types":[]},{"text":"impl !Sync for Enum","synthetic":true,"types":[]},{"text":"impl !Sync for Extern","synthetic":true,"types":[]},{"text":"impl !Sync for Final","synthetic":true,"types":[]},{"text":"impl !Sync for Fn","synthetic":true,"types":[]},{"text":"impl !Sync for For","synthetic":true,"types":[]},{"text":"impl !Sync for If","synthetic":true,"types":[]},{"text":"impl !Sync for Impl","synthetic":true,"types":[]},{"text":"impl !Sync for In","synthetic":true,"types":[]},{"text":"impl !Sync for Let","synthetic":true,"types":[]},{"text":"impl !Sync for Loop","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for Match","synthetic":true,"types":[]},{"text":"impl !Sync for Mod","synthetic":true,"types":[]},{"text":"impl !Sync for Move","synthetic":true,"types":[]},{"text":"impl !Sync for Mut","synthetic":true,"types":[]},{"text":"impl !Sync for Override","synthetic":true,"types":[]},{"text":"impl !Sync for Priv","synthetic":true,"types":[]},{"text":"impl !Sync for Pub","synthetic":true,"types":[]},{"text":"impl !Sync for Ref","synthetic":true,"types":[]},{"text":"impl !Sync for Return","synthetic":true,"types":[]},{"text":"impl !Sync for SelfType","synthetic":true,"types":[]},{"text":"impl !Sync for SelfValue","synthetic":true,"types":[]},{"text":"impl !Sync for Static","synthetic":true,"types":[]},{"text":"impl !Sync for Struct","synthetic":true,"types":[]},{"text":"impl !Sync for Super","synthetic":true,"types":[]},{"text":"impl !Sync for Trait","synthetic":true,"types":[]},{"text":"impl !Sync for Try","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Typeof","synthetic":true,"types":[]},{"text":"impl !Sync for Union","synthetic":true,"types":[]},{"text":"impl !Sync for Unsafe","synthetic":true,"types":[]},{"text":"impl !Sync for Unsized","synthetic":true,"types":[]},{"text":"impl !Sync for Use","synthetic":true,"types":[]},{"text":"impl !Sync for Virtual","synthetic":true,"types":[]},{"text":"impl !Sync for Where","synthetic":true,"types":[]},{"text":"impl !Sync for While","synthetic":true,"types":[]},{"text":"impl !Sync for Yield","synthetic":true,"types":[]},{"text":"impl !Sync for Add","synthetic":true,"types":[]},{"text":"impl !Sync for AddEq","synthetic":true,"types":[]},{"text":"impl !Sync for And","synthetic":true,"types":[]},{"text":"impl !Sync for AndAnd","synthetic":true,"types":[]},{"text":"impl !Sync for AndEq","synthetic":true,"types":[]},{"text":"impl !Sync for At","synthetic":true,"types":[]},{"text":"impl !Sync for Bang","synthetic":true,"types":[]},{"text":"impl !Sync for Caret","synthetic":true,"types":[]},{"text":"impl !Sync for CaretEq","synthetic":true,"types":[]},{"text":"impl !Sync for Colon","synthetic":true,"types":[]},{"text":"impl !Sync for Colon2","synthetic":true,"types":[]},{"text":"impl !Sync for Comma","synthetic":true,"types":[]},{"text":"impl !Sync for Div","synthetic":true,"types":[]},{"text":"impl !Sync for DivEq","synthetic":true,"types":[]},{"text":"impl !Sync for Dollar","synthetic":true,"types":[]},{"text":"impl !Sync for Dot","synthetic":true,"types":[]},{"text":"impl !Sync for Dot2","synthetic":true,"types":[]},{"text":"impl !Sync for Dot3","synthetic":true,"types":[]},{"text":"impl !Sync for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Sync for Eq","synthetic":true,"types":[]},{"text":"impl !Sync for EqEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ge","synthetic":true,"types":[]},{"text":"impl !Sync for Gt","synthetic":true,"types":[]},{"text":"impl !Sync for Le","synthetic":true,"types":[]},{"text":"impl !Sync for Lt","synthetic":true,"types":[]},{"text":"impl !Sync for MulEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ne","synthetic":true,"types":[]},{"text":"impl !Sync for Or","synthetic":true,"types":[]},{"text":"impl !Sync for OrEq","synthetic":true,"types":[]},{"text":"impl !Sync for OrOr","synthetic":true,"types":[]},{"text":"impl !Sync for Pound","synthetic":true,"types":[]},{"text":"impl !Sync for Question","synthetic":true,"types":[]},{"text":"impl !Sync for RArrow","synthetic":true,"types":[]},{"text":"impl !Sync for LArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Rem","synthetic":true,"types":[]},{"text":"impl !Sync for RemEq","synthetic":true,"types":[]},{"text":"impl !Sync for FatArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Semi","synthetic":true,"types":[]},{"text":"impl !Sync for Shl","synthetic":true,"types":[]},{"text":"impl !Sync for ShlEq","synthetic":true,"types":[]},{"text":"impl !Sync for Shr","synthetic":true,"types":[]},{"text":"impl !Sync for ShrEq","synthetic":true,"types":[]},{"text":"impl !Sync for Star","synthetic":true,"types":[]},{"text":"impl !Sync for Sub","synthetic":true,"types":[]},{"text":"impl !Sync for SubEq","synthetic":true,"types":[]},{"text":"impl !Sync for Tilde","synthetic":true,"types":[]},{"text":"impl !Sync for Brace","synthetic":true,"types":[]},{"text":"impl !Sync for Bracket","synthetic":true,"types":[]},{"text":"impl !Sync for Paren","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Sync for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Nothing","synthetic":true,"types":[]}];
implementors["wasi_common"] = [{"text":"impl !Sync for WasiCtx","synthetic":true,"types":[]},{"text":"impl !Sync for WasiCtxBuilder","synthetic":true,"types":[]},{"text":"impl Sync for HandleRights","synthetic":true,"types":[]},{"text":"impl !Sync for OsDir","synthetic":true,"types":[]},{"text":"impl !Sync for OsFile","synthetic":true,"types":[]},{"text":"impl !Sync for OsOther","synthetic":true,"types":[]},{"text":"impl Sync for WasiCtxBuilderError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; !Sync for Dir&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DirBuilder","synthetic":true,"types":[]},{"text":"impl Sync for DirEntry","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; !Sync for File&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FileType","synthetic":true,"types":[]},{"text":"impl Sync for Metadata","synthetic":true,"types":[]},{"text":"impl Sync for OpenOptions","synthetic":true,"types":[]},{"text":"impl Sync for Permissions","synthetic":true,"types":[]},{"text":"impl Sync for ReadDir","synthetic":true,"types":[]},{"text":"impl Sync for WasiCtx","synthetic":true,"types":[]},{"text":"impl Sync for WasiCtxBuilder","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_dirent_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_fdstat_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_filestat_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_event_fd_readwrite_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_event_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_subscription_clock_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_subscription_fd_readwrite_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_subscription_u_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_subscription_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_subscription_u_u_t","synthetic":true,"types":[]},{"text":"impl Sync for WasiError","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_iovec_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_ciovec_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_prestat_dir_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_prestat_t","synthetic":true,"types":[]},{"text":"impl Sync for __wasi_prestat_u_t","synthetic":true,"types":[]},{"text":"impl Sync for VecFileContents","synthetic":true,"types":[]},{"text":"impl !Sync for InMemoryFile","synthetic":true,"types":[]},{"text":"impl !Sync for VirtualDir","synthetic":true,"types":[]},{"text":"impl !Sync for VirtualDirEntry","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ReadPipe&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for WritePipe&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Rights","synthetic":true,"types":[]},{"text":"impl Sync for Fd","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Iovec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Ciovec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Dirent","synthetic":true,"types":[]},{"text":"impl Sync for Fdflags","synthetic":true,"types":[]},{"text":"impl Sync for Fdstat","synthetic":true,"types":[]},{"text":"impl Sync for Fstflags","synthetic":true,"types":[]},{"text":"impl Sync for Lookupflags","synthetic":true,"types":[]},{"text":"impl Sync for Oflags","synthetic":true,"types":[]},{"text":"impl Sync for Filestat","synthetic":true,"types":[]},{"text":"impl Sync for Eventrwflags","synthetic":true,"types":[]},{"text":"impl Sync for EventFdReadwrite","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Subclockflags","synthetic":true,"types":[]},{"text":"impl Sync for SubscriptionClock","synthetic":true,"types":[]},{"text":"impl Sync for SubscriptionFdReadwrite","synthetic":true,"types":[]},{"text":"impl Sync for Subscription","synthetic":true,"types":[]},{"text":"impl Sync for Riflags","synthetic":true,"types":[]},{"text":"impl Sync for Roflags","synthetic":true,"types":[]},{"text":"impl Sync for Sdflags","synthetic":true,"types":[]},{"text":"impl Sync for PrestatDir","synthetic":true,"types":[]},{"text":"impl Sync for Clockid","synthetic":true,"types":[]},{"text":"impl Sync for Errno","synthetic":true,"types":[]},{"text":"impl Sync for Whence","synthetic":true,"types":[]},{"text":"impl Sync for Filetype","synthetic":true,"types":[]},{"text":"impl Sync for Advice","synthetic":true,"types":[]},{"text":"impl Sync for Eventtype","synthetic":true,"types":[]},{"text":"impl Sync for SubscriptionU","synthetic":true,"types":[]},{"text":"impl Sync for Signal","synthetic":true,"types":[]},{"text":"impl Sync for Preopentype","synthetic":true,"types":[]},{"text":"impl Sync for Prestat","synthetic":true,"types":[]}];
implementors["wasmtime"] = [{"text":"impl !Sync for Global","synthetic":true,"types":[]},{"text":"impl !Sync for Table","synthetic":true,"types":[]},{"text":"impl !Sync for Memory","synthetic":true,"types":[]},{"text":"impl&lt;'instance&gt; !Sync for Export&lt;'instance&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FrameInfo","synthetic":true,"types":[]},{"text":"impl !Sync for Func","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Caller&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Instance","synthetic":true,"types":[]},{"text":"impl !Sync for Linker","synthetic":true,"types":[]},{"text":"impl Sync for Module","synthetic":true,"types":[]},{"text":"impl !Sync for ExternRef","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for Engine","synthetic":true,"types":[]},{"text":"impl !Sync for Store","synthetic":true,"types":[]},{"text":"impl Sync for InterruptHandle","synthetic":true,"types":[]},{"text":"impl Sync for Trap","synthetic":true,"types":[]},{"text":"impl Sync for Limits","synthetic":true,"types":[]},{"text":"impl Sync for FuncType","synthetic":true,"types":[]},{"text":"impl Sync for GlobalType","synthetic":true,"types":[]},{"text":"impl Sync for TableType","synthetic":true,"types":[]},{"text":"impl Sync for MemoryType","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; Sync for ImportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; Sync for ExportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Extern","synthetic":true,"types":[]},{"text":"impl Sync for Strategy","synthetic":true,"types":[]},{"text":"impl Sync for OptLevel","synthetic":true,"types":[]},{"text":"impl Sync for ProfilingStrategy","synthetic":true,"types":[]},{"text":"impl Sync for Mutability","synthetic":true,"types":[]},{"text":"impl Sync for ValType","synthetic":true,"types":[]},{"text":"impl Sync for ExternType","synthetic":true,"types":[]},{"text":"impl !Sync for Val","synthetic":true,"types":[]}];
implementors["wasmtime_cache"] = [{"text":"impl Sync for CacheConfig","synthetic":true,"types":[]},{"text":"impl&lt;'config&gt; Sync for ModuleCacheEntry&lt;'config&gt;","synthetic":true,"types":[]}];
implementors["wasmtime_cranelift"] = [{"text":"impl Sync for Cranelift","synthetic":true,"types":[]}];
implementors["wasmtime_debug"] = [{"text":"impl Sync for DwarfSection","synthetic":true,"types":[]},{"text":"impl Sync for DwarfSectionRelocTarget","synthetic":true,"types":[]}];
implementors["wasmtime_environ"] = [{"text":"impl Sync for InstructionAddressMap","synthetic":true,"types":[]},{"text":"impl Sync for FunctionAddressMap","synthetic":true,"types":[]},{"text":"impl Sync for BuiltinFunctionIndex","synthetic":true,"types":[]},{"text":"impl Sync for CompiledFunction","synthetic":true,"types":[]},{"text":"impl Sync for Relocation","synthetic":true,"types":[]},{"text":"impl Sync for TrapInformation","synthetic":true,"types":[]},{"text":"impl Sync for StackMapInformation","synthetic":true,"types":[]},{"text":"impl Sync for MemoryPlan","synthetic":true,"types":[]},{"text":"impl Sync for Module","synthetic":true,"types":[]},{"text":"impl Sync for TableElements","synthetic":true,"types":[]},{"text":"impl Sync for TablePlan","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for ModuleEnvironment&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for ModuleTranslation&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FunctionBodyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DebugInfoData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for NameSection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for WasmFileInfo","synthetic":true,"types":[]},{"text":"impl Sync for FunctionMetadata","synthetic":true,"types":[]},{"text":"impl Sync for DataInitializerLocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for DataInitializer&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Tunables","synthetic":true,"types":[]},{"text":"impl Sync for TargetSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl Sync for VMOffsets","synthetic":true,"types":[]},{"text":"impl Sync for ModuleMemoryOffset","synthetic":true,"types":[]},{"text":"impl Sync for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Sync for CompileError","synthetic":true,"types":[]},{"text":"impl Sync for EntityIndex","synthetic":true,"types":[]},{"text":"impl Sync for MemoryStyle","synthetic":true,"types":[]},{"text":"impl Sync for TableStyle","synthetic":true,"types":[]}];
implementors["wasmtime_fuzzing"] = [{"text":"impl Sync for DifferentialConfig","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for SpecTest","synthetic":true,"types":[]},{"text":"impl Sync for TableOps","synthetic":true,"types":[]}];
implementors["wasmtime_jit"] = [{"text":"impl Sync for CodeMemory","synthetic":true,"types":[]},{"text":"impl Sync for Compilation","synthetic":true,"types":[]},{"text":"impl Sync for Compiler","synthetic":true,"types":[]},{"text":"impl Sync for CompilationArtifacts","synthetic":true,"types":[]},{"text":"impl Sync for CompiledModule","synthetic":true,"types":[]},{"text":"impl Sync for CompilationStrategy","synthetic":true,"types":[]},{"text":"impl Sync for SetupError","synthetic":true,"types":[]},{"text":"impl Sync for TrampolineRelocSink","synthetic":true,"types":[]}];
implementors["wasmtime_lightbeam"] = [{"text":"impl Sync for Lightbeam","synthetic":true,"types":[]}];
implementors["wasmtime_obj"] = [{"text":"impl&lt;'a&gt; Sync for ObjectBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ObjectBuilderTarget","synthetic":true,"types":[]}];
implementors["wasmtime_profiling"] = [{"text":"impl Sync for JitDumpAgent","synthetic":true,"types":[]},{"text":"impl Sync for VTuneAgent","synthetic":true,"types":[]},{"text":"impl Sync for NullProfilerAgent","synthetic":true,"types":[]}];
implementors["wasmtime_runtime"] = [{"text":"impl !Sync for ExportFunction","synthetic":true,"types":[]},{"text":"impl !Sync for ExportTable","synthetic":true,"types":[]},{"text":"impl !Sync for ExportMemory","synthetic":true,"types":[]},{"text":"impl !Sync for ExportGlobal","synthetic":true,"types":[]},{"text":"impl !Sync for VMExternRef","synthetic":true,"types":[]},{"text":"impl !Sync for VMExternRefActivationsTable","synthetic":true,"types":[]},{"text":"impl !Sync for StackMapRegistry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Imports&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for InstanceHandle","synthetic":true,"types":[]},{"text":"impl Sync for LinkError","synthetic":true,"types":[]},{"text":"impl Sync for Mmap","synthetic":true,"types":[]},{"text":"impl Sync for SignatureRegistry","synthetic":true,"types":[]},{"text":"impl !Sync for Table","synthetic":true,"types":[]},{"text":"impl !Sync for VMCallerCheckedAnyfunc","synthetic":true,"types":[]},{"text":"impl Sync for VMContext","synthetic":true,"types":[]},{"text":"impl Sync for VMFunctionBody","synthetic":true,"types":[]},{"text":"impl !Sync for VMFunctionImport","synthetic":true,"types":[]},{"text":"impl Sync for VMGlobalDefinition","synthetic":true,"types":[]},{"text":"impl !Sync for VMGlobalImport","synthetic":true,"types":[]},{"text":"impl Sync for VMInterrupts","synthetic":true,"types":[]},{"text":"impl Sync for VMInvokeArgument","synthetic":true,"types":[]},{"text":"impl !Sync for VMMemoryDefinition","synthetic":true,"types":[]},{"text":"impl !Sync for VMMemoryImport","synthetic":true,"types":[]},{"text":"impl Sync for VMSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl !Sync for VMTableDefinition","synthetic":true,"types":[]},{"text":"impl !Sync for VMTableImport","synthetic":true,"types":[]},{"text":"impl !Sync for Export","synthetic":true,"types":[]},{"text":"impl Sync for InstantiationError","synthetic":true,"types":[]},{"text":"impl !Sync for TableElement","synthetic":true,"types":[]},{"text":"impl Sync for Trap","synthetic":true,"types":[]},{"text":"impl Sync for GdbJitImageRegistration","synthetic":false,"types":[]}];
implementors["wasmtime_wasi"] = [{"text":"impl !Sync for Wasi","synthetic":true,"types":[]},{"text":"impl !Sync for Wasi","synthetic":true,"types":[]}];
implementors["wasmtime_wast"] = [{"text":"impl !Sync for WastContext","synthetic":true,"types":[]}];
implementors["wasmtime_wiggle"] = [{"text":"impl !Sync for WasmtimeGuestMemory","synthetic":true,"types":[]}];
implementors["wiggle"] = [{"text":"impl Sync for Region","synthetic":true,"types":[]},{"text":"impl Sync for BorrowHandle","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for GuestPtr&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for GuestSlice&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for GuestStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GuestError","synthetic":true,"types":[]}];
implementors["wiggle_generate"] = [{"text":"impl !Sync for ErrorTransform","synthetic":true,"types":[]},{"text":"impl !Sync for UserErrorType","synthetic":true,"types":[]},{"text":"impl !Sync for Names","synthetic":true,"types":[]},{"text":"impl !Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for Paths","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl !Sync for CtxConf","synthetic":true,"types":[]},{"text":"impl !Sync for ErrorConf","synthetic":true,"types":[]},{"text":"impl !Sync for ErrorConfField","synthetic":true,"types":[]},{"text":"impl !Sync for ConfigField","synthetic":true,"types":[]},{"text":"impl Sync for WitxConf","synthetic":true,"types":[]}];
implementors["wiggle_test"] = [{"text":"impl Sync for MemAreas","synthetic":true,"types":[]},{"text":"impl !Sync for HostMemory","synthetic":true,"types":[]},{"text":"impl Sync for MemArea","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for WasiCtx&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["witx"] = [{"text":"impl !Sync for Document","synthetic":true,"types":[]},{"text":"impl Sync for EnumDatatype","synthetic":true,"types":[]},{"text":"impl Sync for EnumVariant","synthetic":true,"types":[]},{"text":"impl Sync for FlagsDatatype","synthetic":true,"types":[]},{"text":"impl Sync for FlagsMember","synthetic":true,"types":[]},{"text":"impl !Sync for HandleDatatype","synthetic":true,"types":[]},{"text":"impl Sync for Id","synthetic":true,"types":[]},{"text":"impl Sync for IntConst","synthetic":true,"types":[]},{"text":"impl Sync for IntDatatype","synthetic":true,"types":[]},{"text":"impl !Sync for InterfaceFunc","synthetic":true,"types":[]},{"text":"impl !Sync for InterfaceFuncParam","synthetic":true,"types":[]},{"text":"impl !Sync for Module","synthetic":true,"types":[]},{"text":"impl Sync for ModuleImport","synthetic":true,"types":[]},{"text":"impl !Sync for NamedType","synthetic":true,"types":[]},{"text":"impl !Sync for StructDatatype","synthetic":true,"types":[]},{"text":"impl !Sync for StructMember","synthetic":true,"types":[]},{"text":"impl !Sync for UnionDatatype","synthetic":true,"types":[]},{"text":"impl !Sync for UnionVariant","synthetic":true,"types":[]},{"text":"impl !Sync for CoreFuncType","synthetic":true,"types":[]},{"text":"impl !Sync for CoreParamType","synthetic":true,"types":[]},{"text":"impl Sync for Filesystem","synthetic":true,"types":[]},{"text":"impl Sync for MockFs","synthetic":true,"types":[]},{"text":"impl Sync for SizeAlign","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for StructMemberLayout&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UnionLayout","synthetic":true,"types":[]},{"text":"impl Sync for Location","synthetic":true,"types":[]},{"text":"impl Sync for BuiltinType","synthetic":true,"types":[]},{"text":"impl !Sync for Definition","synthetic":true,"types":[]},{"text":"impl !Sync for Entry","synthetic":true,"types":[]},{"text":"impl Sync for IntRepr","synthetic":true,"types":[]},{"text":"impl Sync for InterfaceFuncParamPosition","synthetic":true,"types":[]},{"text":"impl !Sync for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl !Sync for ModuleEntry","synthetic":true,"types":[]},{"text":"impl Sync for ModuleImportVariant","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for TypeRef","synthetic":true,"types":[]},{"text":"impl Sync for AtomType","synthetic":true,"types":[]},{"text":"impl Sync for CoreParamSignifies","synthetic":true,"types":[]},{"text":"impl Sync for TypePassedBy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DeclSyntax&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SExpr","synthetic":true,"types":[]},{"text":"impl Sync for RepEquality","synthetic":true,"types":[]},{"text":"impl Sync for ValidationError","synthetic":true,"types":[]},{"text":"impl Sync for WitxError","synthetic":true,"types":[]},{"text":"impl !Sync for Polyfill","synthetic":true,"types":[]},{"text":"impl !Sync for ModulePolyfill","synthetic":true,"types":[]},{"text":"impl !Sync for FuncPolyfill","synthetic":true,"types":[]},{"text":"impl !Sync for ParamPolyfill","synthetic":true,"types":[]},{"text":"impl Sync for PolyfillError","synthetic":true,"types":[]},{"text":"impl !Sync for ParamUnknown","synthetic":true,"types":[]},{"text":"impl !Sync for TypePolyfill","synthetic":true,"types":[]}];
implementors["yanix"] = [{"text":"impl Sync for ClockId","synthetic":true,"types":[]},{"text":"impl !Sync for Dir","synthetic":true,"types":[]},{"text":"impl Sync for Entry","synthetic":true,"types":[]},{"text":"impl Sync for SeekLoc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DirIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FdFlags","synthetic":true,"types":[]},{"text":"impl Sync for AtFlags","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for OFlags","synthetic":true,"types":[]},{"text":"impl Sync for FileType","synthetic":true,"types":[]},{"text":"impl Sync for FileTime","synthetic":true,"types":[]},{"text":"impl Sync for PollFlags","synthetic":true,"types":[]},{"text":"impl Sync for PollFd","synthetic":true,"types":[]},{"text":"impl Sync for SockType","synthetic":true,"types":[]},{"text":"impl Sync for PosixFadviseAdvice","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()