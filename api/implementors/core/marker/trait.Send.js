(function() {var implementors = {};
implementors["clif_json"] = [{"text":"impl Send for SerInst","synthetic":true,"types":[]},{"text":"impl Send for SerBlock","synthetic":true,"types":[]},{"text":"impl Send for SerDataFlowGraph","synthetic":true,"types":[]},{"text":"impl Send for SerSignature","synthetic":true,"types":[]},{"text":"impl Send for SerFunction","synthetic":true,"types":[]},{"text":"impl Send for SerObj","synthetic":true,"types":[]},{"text":"impl Send for SerInstData","synthetic":true,"types":[]}];
implementors["clif_util"] = [{"text":"impl Send for TestOptions","synthetic":true,"types":[]},{"text":"impl Send for PassOptions","synthetic":true,"types":[]},{"text":"impl Send for CompiledWithoutSupportOptions","synthetic":true,"types":[]},{"text":"impl Send for Commands","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for RemoveInst","synthetic":true,"types":[]},{"text":"impl Send for ReplaceInstWithConst","synthetic":true,"types":[]},{"text":"impl Send for ReplaceInstWithTrap","synthetic":true,"types":[]},{"text":"impl Send for MoveInstToEntryBlock","synthetic":true,"types":[]},{"text":"impl Send for RemoveBlock","synthetic":true,"types":[]},{"text":"impl Send for ReplaceBlockParamWithConst","synthetic":true,"types":[]},{"text":"impl Send for RemoveUnusedEntities","synthetic":true,"types":[]},{"text":"impl Send for MergeBlocks","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CrashCheckContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ProgressStatus","synthetic":true,"types":[]},{"text":"impl Send for CheckResult","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for PrintRelocs","synthetic":true,"types":[]},{"text":"impl Send for PrintTraps","synthetic":true,"types":[]},{"text":"impl Send for PrintStackMaps","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for FileInterpreter","synthetic":true,"types":[]},{"text":"impl Send for FileInterpreterFailure","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for OwnedFlagsOrIsa","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]}];
implementors["cranelift_bforest"] = [{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, C&gt; Send for MapCursor&lt;'a, K, V, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for MapForest&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for MapIter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for Set&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C&gt; Send for SetCursor&lt;'a, K, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for SetForest&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for SetIter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_codegen"] = [{"text":"impl !Send for Context","synthetic":true,"types":[]},{"text":"impl Send for ValueLocRange","synthetic":true,"types":[]},{"text":"impl Send for CodegenError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for MemoryCodeSink&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NullRelocSink","synthetic":true,"types":[]},{"text":"impl Send for NullStackMapSink","synthetic":true,"types":[]},{"text":"impl Send for NullTrapSink","synthetic":true,"types":[]},{"text":"impl Send for StackMap","synthetic":true,"types":[]},{"text":"impl Send for RegDiversions","synthetic":true,"types":[]},{"text":"impl Send for CodeInfo","synthetic":true,"types":[]},{"text":"impl Send for Reloc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CFGPrinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for FuncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for EncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Send for CursorPosition","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for DisplayList&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DominatorTree","synthetic":true,"types":[]},{"text":"impl Send for DominatorTreePreorder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ChildIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BlockPredecessor","synthetic":true,"types":[]},{"text":"impl Send for ControlFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PredIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f, IIB&gt; Send for InsertBuilder&lt;'f, IIB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IIB: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for ReplaceBuilder&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Send for AbiParam","synthetic":true,"types":[]},{"text":"impl Send for ExtFuncData","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for HeapData","synthetic":true,"types":[]},{"text":"impl Send for MemFlags","synthetic":true,"types":[]},{"text":"impl Send for ProgramPoint","synthetic":true,"types":[]},{"text":"impl Send for SourceLoc","synthetic":true,"types":[]},{"text":"impl Send for TableData","synthetic":true,"types":[]},{"text":"impl Send for ValueLabel","synthetic":true,"types":[]},{"text":"impl Send for ValueLabelStart","synthetic":true,"types":[]},{"text":"impl Send for AtomicRmwOp","synthetic":true,"types":[]},{"text":"impl Send for ArgumentExtension","synthetic":true,"types":[]},{"text":"impl Send for ArgumentPurpose","synthetic":true,"types":[]},{"text":"impl Send for ExternalName","synthetic":true,"types":[]},{"text":"impl Send for GlobalValueData","synthetic":true,"types":[]},{"text":"impl Send for HeapStyle","synthetic":true,"types":[]},{"text":"impl Send for LibCall","synthetic":true,"types":[]},{"text":"impl Send for ExpandedProgramPoint","synthetic":true,"types":[]},{"text":"impl Send for TrapCode","synthetic":true,"types":[]},{"text":"impl Send for ArgumentLoc","synthetic":true,"types":[]},{"text":"impl Send for ValueLoc","synthetic":true,"types":[]},{"text":"impl Send for ValueLabelAssignments","synthetic":true,"types":[]},{"text":"impl Send for ConstantData","synthetic":true,"types":[]},{"text":"impl Send for ConstantPoolEntry","synthetic":true,"types":[]},{"text":"impl Send for ConstantPool","synthetic":true,"types":[]},{"text":"impl Send for DataFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DisplayInst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ValueDef","synthetic":true,"types":[]},{"text":"impl Send for Block","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Inst","synthetic":true,"types":[]},{"text":"impl Send for StackSlot","synthetic":true,"types":[]},{"text":"impl Send for GlobalValue","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl Send for Immediate","synthetic":true,"types":[]},{"text":"impl Send for JumpTable","synthetic":true,"types":[]},{"text":"impl Send for FuncRef","synthetic":true,"types":[]},{"text":"impl Send for SigRef","synthetic":true,"types":[]},{"text":"impl Send for Heap","synthetic":true,"types":[]},{"text":"impl Send for Table","synthetic":true,"types":[]},{"text":"impl Send for AnyEntity","synthetic":true,"types":[]},{"text":"impl Send for Function","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DisplayFunctionAnnotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DisplayFunction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InstOffsetIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Imm64","synthetic":true,"types":[]},{"text":"impl Send for Uimm64","synthetic":true,"types":[]},{"text":"impl Send for Uimm32","synthetic":true,"types":[]},{"text":"impl Send for V128Imm","synthetic":true,"types":[]},{"text":"impl Send for Offset32","synthetic":true,"types":[]},{"text":"impl Send for Ieee32","synthetic":true,"types":[]},{"text":"impl Send for Ieee64","synthetic":true,"types":[]},{"text":"impl Send for VariableArgs","synthetic":true,"types":[]},{"text":"impl Send for OpcodeConstraints","synthetic":true,"types":[]},{"text":"impl Send for ValueTypeSet","synthetic":true,"types":[]},{"text":"impl Send for InstructionFormat","synthetic":true,"types":[]},{"text":"impl Send for InstructionData","synthetic":true,"types":[]},{"text":"impl Send for Opcode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BranchInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CallInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ResolvedConstraint","synthetic":true,"types":[]},{"text":"impl Send for JumpTableData","synthetic":true,"types":[]},{"text":"impl Send for Layout","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for Blocks&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for Insts&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Send for StackSlotData","synthetic":true,"types":[]},{"text":"impl Send for StackLayoutInfo","synthetic":true,"types":[]},{"text":"impl Send for StackSlots","synthetic":true,"types":[]},{"text":"impl Send for StackSlotKind","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for BranchRange","synthetic":true,"types":[]},{"text":"impl Send for OperandConstraint","synthetic":true,"types":[]},{"text":"impl Send for RecipeConstraints","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Encodings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EncInfo","synthetic":true,"types":[]},{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for StackBaseMask","synthetic":true,"types":[]},{"text":"impl Send for StackRef","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for TargetFrontendConfig","synthetic":true,"types":[]},{"text":"impl Send for CallConv","synthetic":true,"types":[]},{"text":"impl Send for ConstraintKind","synthetic":true,"types":[]},{"text":"impl Send for StackBase","synthetic":true,"types":[]},{"text":"impl Send for LookupError","synthetic":true,"types":[]},{"text":"impl Send for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Send for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Send for RegisterMappingError","synthetic":true,"types":[]},{"text":"impl Send for UnwindInfo","synthetic":true,"types":[]},{"text":"impl Send for RegBank","synthetic":true,"types":[]},{"text":"impl Send for RegClassData","synthetic":true,"types":[]},{"text":"impl Send for RegClassIndex","synthetic":true,"types":[]},{"text":"impl Send for RegInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DisplayRegUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Loop","synthetic":true,"types":[]},{"text":"impl Send for LoopAnalysis","synthetic":true,"types":[]},{"text":"impl Send for MachCompileResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MachTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InstColor","synthetic":true,"types":[]},{"text":"impl Send for LowerInput","synthetic":true,"types":[]},{"text":"impl&lt;'func, I&gt; !Send for Lower&lt;'func, I&gt;","synthetic":true,"types":[]},{"text":"impl Send for RelocDistance","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for VCode&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for VCodeBuilder&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Send for BlockLoweringOrder","synthetic":true,"types":[]},{"text":"impl Send for LoweredBlock","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for ABICalleeImpl&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as ABIMachineSpec&gt;::I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for ABICallerImpl&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ABIArg","synthetic":true,"types":[]},{"text":"impl Send for ArgsOrRets","synthetic":true,"types":[]},{"text":"impl Send for InstIsSafepoint","synthetic":true,"types":[]},{"text":"impl Send for StackAMode","synthetic":true,"types":[]},{"text":"impl Send for CallDest","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MachBuffer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as MachInst&gt;::LabelUse: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MachBufferFinalized","synthetic":true,"types":[]},{"text":"impl Send for MachLabel","synthetic":true,"types":[]},{"text":"impl Send for MachSrcLoc","synthetic":true,"types":[]},{"text":"impl Send for MachStackMap","synthetic":true,"types":[]},{"text":"impl Send for StackMapExtent","synthetic":true,"types":[]},{"text":"impl Send for TargetIsaAdapter","synthetic":true,"types":[]},{"text":"impl Send for AtomicRmwOp","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PredicateView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FlagsOrIsa&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetError","synthetic":true,"types":[]},{"text":"impl Send for Regalloc","synthetic":true,"types":[]},{"text":"impl Send for OptLevel","synthetic":true,"types":[]},{"text":"impl Send for TlsModel","synthetic":true,"types":[]},{"text":"impl Send for LibcallCallConv","synthetic":true,"types":[]},{"text":"impl Send for Template","synthetic":true,"types":[]},{"text":"impl Send for Descriptor","synthetic":true,"types":[]},{"text":"impl Send for Detail","synthetic":true,"types":[]},{"text":"impl Send for PassTimes","synthetic":true,"types":[]},{"text":"impl Send for TimingToken","synthetic":true,"types":[]},{"text":"impl Send for VerifierError","synthetic":true,"types":[]},{"text":"impl Send for VerifierErrors","synthetic":true,"types":[]},{"text":"impl Send for PlainWriter","synthetic":true,"types":[]}];
implementors["cranelift_codegen_meta"] = [{"text":"impl !Send for Def","synthetic":true,"types":[]},{"text":"impl !Send for DefPool","synthetic":true,"types":[]},{"text":"impl Send for DefIndex","synthetic":true,"types":[]},{"text":"impl Send for Block","synthetic":true,"types":[]},{"text":"impl Send for BlockPool","synthetic":true,"types":[]},{"text":"impl !Send for Var","synthetic":true,"types":[]},{"text":"impl Send for VarIndex","synthetic":true,"types":[]},{"text":"impl !Send for VarPool","synthetic":true,"types":[]},{"text":"impl Send for ConstPool","synthetic":true,"types":[]},{"text":"impl !Send for Apply","synthetic":true,"types":[]},{"text":"impl Send for DummyVar","synthetic":true,"types":[]},{"text":"impl Send for DummyConstant","synthetic":true,"types":[]},{"text":"impl !Send for DummyDef","synthetic":true,"types":[]},{"text":"impl !Send for ExprBuilder","synthetic":true,"types":[]},{"text":"impl Send for Expr","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for PatternPosition","synthetic":true,"types":[]},{"text":"impl !Send for DummyExpr","synthetic":true,"types":[]},{"text":"impl !Send for CpuMode","synthetic":true,"types":[]},{"text":"impl !Send for EncodingContent","synthetic":true,"types":[]},{"text":"impl !Send for EncodingBuilder","synthetic":true,"types":[]},{"text":"impl !Send for FormatField","synthetic":true,"types":[]},{"text":"impl !Send for InstructionFormat","synthetic":true,"types":[]},{"text":"impl Send for FormatStructure","synthetic":true,"types":[]},{"text":"impl !Send for InstructionFormatBuilder","synthetic":true,"types":[]},{"text":"impl Send for OpcodeNumber","synthetic":true,"types":[]},{"text":"impl&lt;'all_inst&gt; !Send for InstructionGroupBuilder&lt;'all_inst&gt;","synthetic":true,"types":[]},{"text":"impl !Send for InstructionGroup","synthetic":true,"types":[]},{"text":"impl !Send for PolymorphicInfo","synthetic":true,"types":[]},{"text":"impl !Send for InstructionContent","synthetic":true,"types":[]},{"text":"impl !Send for InstructionBuilder","synthetic":true,"types":[]},{"text":"impl !Send for BoundInstruction","synthetic":true,"types":[]},{"text":"impl Send for FormatPredicateNode","synthetic":true,"types":[]},{"text":"impl Send for InstructionPredicate","synthetic":true,"types":[]},{"text":"impl Send for InstructionPredicateNumber","synthetic":true,"types":[]},{"text":"impl Send for InstructionPredicateRegistry","synthetic":true,"types":[]},{"text":"impl Send for ValueTypeOrAny","synthetic":true,"types":[]},{"text":"impl Send for BindParameter","synthetic":true,"types":[]},{"text":"impl Send for Immediate","synthetic":true,"types":[]},{"text":"impl Send for FormatPredicateKind","synthetic":true,"types":[]},{"text":"impl Send for TypePredicateNode","synthetic":true,"types":[]},{"text":"impl Send for InstructionPredicateNode","synthetic":true,"types":[]},{"text":"impl !Send for InstSpec","synthetic":true,"types":[]},{"text":"impl !Send for TargetIsa","synthetic":true,"types":[]},{"text":"impl !Send for Operand","synthetic":true,"types":[]},{"text":"impl !Send for OperandKind","synthetic":true,"types":[]},{"text":"impl !Send for OperandKindFields","synthetic":true,"types":[]},{"text":"impl Send for Register","synthetic":true,"types":[]},{"text":"impl Send for Stack","synthetic":true,"types":[]},{"text":"impl Send for BranchRange","synthetic":true,"types":[]},{"text":"impl !Send for EncodingRecipe","synthetic":true,"types":[]},{"text":"impl Send for EncodingRecipeNumber","synthetic":true,"types":[]},{"text":"impl !Send for EncodingRecipeBuilder","synthetic":true,"types":[]},{"text":"impl Send for OperandConstraint","synthetic":true,"types":[]},{"text":"impl Send for RegBankIndex","synthetic":true,"types":[]},{"text":"impl Send for RegBank","synthetic":true,"types":[]},{"text":"impl Send for RegClassIndex","synthetic":true,"types":[]},{"text":"impl Send for RegClass","synthetic":true,"types":[]},{"text":"impl Send for RegClassBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegBankBuilder","synthetic":true,"types":[]},{"text":"impl Send for IsaRegsBuilder","synthetic":true,"types":[]},{"text":"impl Send for IsaRegs","synthetic":true,"types":[]},{"text":"impl Send for RegClassProto","synthetic":true,"types":[]},{"text":"impl Send for BoolSettingIndex","synthetic":true,"types":[]},{"text":"impl Send for BoolSetting","synthetic":true,"types":[]},{"text":"impl Send for Setting","synthetic":true,"types":[]},{"text":"impl Send for PresetIndex","synthetic":true,"types":[]},{"text":"impl Send for Preset","synthetic":true,"types":[]},{"text":"impl Send for SettingGroup","synthetic":true,"types":[]},{"text":"impl Send for ProtoSetting","synthetic":true,"types":[]},{"text":"impl Send for ProtoPredicate","synthetic":true,"types":[]},{"text":"impl Send for Predicate","synthetic":true,"types":[]},{"text":"impl Send for SettingGroupBuilder","synthetic":true,"types":[]},{"text":"impl Send for SpecificSetting","synthetic":true,"types":[]},{"text":"impl Send for PresetType","synthetic":true,"types":[]},{"text":"impl Send for ProtoSpecificSetting","synthetic":true,"types":[]},{"text":"impl Send for PredicateNode","synthetic":true,"types":[]},{"text":"impl !Send for TypeEnvironment","synthetic":true,"types":[]},{"text":"impl !Send for Constraint","synthetic":true,"types":[]},{"text":"impl Send for TypeEnvRank","synthetic":true,"types":[]},{"text":"impl Send for LaneTypeIterator","synthetic":true,"types":[]},{"text":"impl Send for VectorType","synthetic":true,"types":[]},{"text":"impl Send for SpecialTypeIterator","synthetic":true,"types":[]},{"text":"impl Send for ReferenceType","synthetic":true,"types":[]},{"text":"impl Send for ReferenceTypeIterator","synthetic":true,"types":[]},{"text":"impl Send for ValueType","synthetic":true,"types":[]},{"text":"impl Send for LaneType","synthetic":true,"types":[]},{"text":"impl Send for SpecialType","synthetic":true,"types":[]},{"text":"impl !Send for TypeVarContent","synthetic":true,"types":[]},{"text":"impl !Send for TypeVar","synthetic":true,"types":[]},{"text":"impl !Send for TypeVarParent","synthetic":true,"types":[]},{"text":"impl Send for TypeSet","synthetic":true,"types":[]},{"text":"impl Send for TypeSetBuilder","synthetic":true,"types":[]},{"text":"impl Send for DerivedFunc","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl !Send for Transform","synthetic":true,"types":[]},{"text":"impl !Send for TransformGroup","synthetic":true,"types":[]},{"text":"impl Send for TransformGroupIndex","synthetic":true,"types":[]},{"text":"impl !Send for TransformGroupBuilder","synthetic":true,"types":[]},{"text":"impl !Send for TransformGroups","synthetic":true,"types":[]},{"text":"impl Send for Formatter","synthetic":true,"types":[]},{"text":"impl Send for Match","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorInner","synthetic":true,"types":[]},{"text":"impl Send for Isa","synthetic":true,"types":[]},{"text":"impl&lt;'defs&gt; !Send for PerCpuModeEncodings&lt;'defs&gt;","synthetic":true,"types":[]},{"text":"impl !Send for RecipeGroup","synthetic":true,"types":[]},{"text":"impl !Send for PerCpuModeEncodings","synthetic":true,"types":[]},{"text":"impl&lt;'builder&gt; !Send for RecipeGroup&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'builder&gt; !Send for Template&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl Send for RecipePrefixKind","synthetic":true,"types":[]},{"text":"impl&lt;'cpu_mode&gt; !Send for Level1Table&lt;'cpu_mode&gt;","synthetic":true,"types":[]},{"text":"impl Send for Level2HashTableEntry","synthetic":true,"types":[]},{"text":"impl !Send for Level2Table","synthetic":true,"types":[]},{"text":"impl Send for Encoder","synthetic":true,"types":[]},{"text":"impl !Send for EncodingList","synthetic":true,"types":[]},{"text":"impl Send for ParentGroup","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SettingOrPreset&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Definitions","synthetic":true,"types":[]},{"text":"impl !Send for EntityRefs","synthetic":true,"types":[]},{"text":"impl !Send for Formats","synthetic":true,"types":[]},{"text":"impl !Send for Immediates","synthetic":true,"types":[]},{"text":"impl Send for BoolIterator","synthetic":true,"types":[]},{"text":"impl Send for IntIterator","synthetic":true,"types":[]},{"text":"impl Send for FloatIterator","synthetic":true,"types":[]},{"text":"impl Send for FlagIterator","synthetic":true,"types":[]},{"text":"impl Send for ReferenceIterator","synthetic":true,"types":[]},{"text":"impl Send for Bool","synthetic":true,"types":[]},{"text":"impl Send for Int","synthetic":true,"types":[]},{"text":"impl Send for Float","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for Reference","synthetic":true,"types":[]},{"text":"impl&lt;'entries, T&gt; Send for UniqueTable&lt;'entries, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UniqueSeqTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_codegen_shared"] = [{"text":"impl Send for IntCC","synthetic":true,"types":[]},{"text":"impl Send for FloatCC","synthetic":true,"types":[]},{"text":"impl Send for EncodingBits","synthetic":true,"types":[]},{"text":"impl Send for OpcodePrefix","synthetic":true,"types":[]}];
implementors["cranelift_entity"] = [{"text":"impl&lt;K, V&gt; Send for BoxedSlice&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for Keys&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EntityList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ListPool&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for SecondaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for PrimaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for EntitySet&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for SparseMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PackedOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_filetests"] = [{"text":"impl Send for SingleFunctionCompiler","synthetic":true,"types":[]}];
implementors["cranelift_frontend"] = [{"text":"impl&lt;'a&gt; Send for FunctionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FunctionBuilderContext","synthetic":true,"types":[]},{"text":"impl Send for Switch","synthetic":true,"types":[]},{"text":"impl Send for Variable","synthetic":true,"types":[]}];
implementors["cranelift_interpreter"] = [{"text":"impl Send for Environment","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Interpreter","synthetic":true,"types":[]},{"text":"impl Send for ControlFlow","synthetic":true,"types":[]},{"text":"impl Send for Trap","synthetic":true,"types":[]}];
implementors["cranelift_module"] = [{"text":"impl Send for DataContext","synthetic":true,"types":[]},{"text":"impl Send for DataDescription","synthetic":true,"types":[]},{"text":"impl Send for DataId","synthetic":true,"types":[]},{"text":"impl Send for FuncId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Module&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledData: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ModuleFunction&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for ModuleNamespace&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledData: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TrapSite","synthetic":true,"types":[]},{"text":"impl Send for Init","synthetic":true,"types":[]},{"text":"impl Send for FuncOrDataId","synthetic":true,"types":[]},{"text":"impl Send for Linkage","synthetic":true,"types":[]},{"text":"impl Send for ModuleError","synthetic":true,"types":[]}];
implementors["cranelift_object"] = [{"text":"impl !Send for ObjectBackend","synthetic":true,"types":[]},{"text":"impl !Send for ObjectBuilder","synthetic":true,"types":[]},{"text":"impl Send for ObjectProduct","synthetic":true,"types":[]}];
implementors["cranelift_reader"] = [{"text":"impl Send for Location","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Invocation","synthetic":true,"types":[]},{"text":"impl Send for SourceMap","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TestCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Comment&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Details&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TestFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IsaSpec","synthetic":true,"types":[]},{"text":"impl Send for ParseOptionError","synthetic":true,"types":[]},{"text":"impl Send for Comparison","synthetic":true,"types":[]},{"text":"impl Send for DataValue","synthetic":true,"types":[]},{"text":"impl Send for DataValueCastFailure","synthetic":true,"types":[]},{"text":"impl Send for RunCommand","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TestOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Feature&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["cranelift_simplejit"] = [{"text":"impl !Send for SimpleJITBackend","synthetic":true,"types":[]},{"text":"impl !Send for SimpleJITBuilder","synthetic":true,"types":[]}];
implementors["cranelift_wasm"] = [{"text":"impl Send for DummyEnvironment","synthetic":true,"types":[]},{"text":"impl Send for WasmFuncType","synthetic":true,"types":[]},{"text":"impl Send for FuncTranslator","synthetic":true,"types":[]},{"text":"impl Send for FuncTranslationState","synthetic":true,"types":[]},{"text":"impl Send for ModuleTranslationState","synthetic":true,"types":[]},{"text":"impl Send for DataIndex","synthetic":true,"types":[]},{"text":"impl Send for DefinedFuncIndex","synthetic":true,"types":[]},{"text":"impl Send for DefinedGlobalIndex","synthetic":true,"types":[]},{"text":"impl Send for DefinedMemoryIndex","synthetic":true,"types":[]},{"text":"impl Send for DefinedTableIndex","synthetic":true,"types":[]},{"text":"impl Send for ElemIndex","synthetic":true,"types":[]},{"text":"impl Send for FuncIndex","synthetic":true,"types":[]},{"text":"impl Send for Global","synthetic":true,"types":[]},{"text":"impl Send for GlobalIndex","synthetic":true,"types":[]},{"text":"impl Send for Memory","synthetic":true,"types":[]},{"text":"impl Send for MemoryIndex","synthetic":true,"types":[]},{"text":"impl Send for SignatureIndex","synthetic":true,"types":[]},{"text":"impl Send for Table","synthetic":true,"types":[]},{"text":"impl Send for TableIndex","synthetic":true,"types":[]},{"text":"impl Send for GlobalVariable","synthetic":true,"types":[]},{"text":"impl Send for ReturnMode","synthetic":true,"types":[]},{"text":"impl Send for WasmError","synthetic":true,"types":[]},{"text":"impl Send for WasmType","synthetic":true,"types":[]},{"text":"impl Send for GlobalInit","synthetic":true,"types":[]},{"text":"impl Send for TableElementType","synthetic":true,"types":[]}];
implementors["lightbeam"] = [{"text":"impl&lt;'module, M&gt; Send for CodeGenSession&lt;'module, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NullOffsetSink","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Sinks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ExecutableModule","synthetic":true,"types":[]},{"text":"impl Send for TranslatedModule","synthetic":true,"types":[]},{"text":"impl Send for ExecutionError","synthetic":true,"types":[]},{"text":"impl Send for Ieee32","synthetic":true,"types":[]},{"text":"impl Send for Ieee64","synthetic":true,"types":[]},{"text":"impl Send for SignfulInt","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Send for BrTable&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Send for BrTargetDrop&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MemoryImmediate","synthetic":true,"types":[]},{"text":"impl&lt;'a, M&gt; Send for MicrowasmConv&lt;'a, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OpSig","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Signedness","synthetic":true,"types":[]},{"text":"impl Send for Size","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Type&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NameTag","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Send for BrTarget&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Label&gt; Send for Operator&lt;Label&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Label: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["peepmatic"] = [{"text":"impl&lt;'a, TOperator&gt; Send for Optimizations&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for Optimization&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for Lhs&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for Integer&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for Boolean&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for ConditionCode&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for Constant&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for Variable&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator, TOperand&gt; Send for Operation&lt;'a, TOperator, TOperand&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperand: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for Precondition&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for Unquote&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Send for Dfs&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl Send for VerifyError","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !Send for DynAstRef&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for Pattern&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for ValueLiteral&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Constraint","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for ConstraintOperand&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; Send for Rhs&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TraversalEvent","synthetic":true,"types":[]}];
implementors["peepmatic_automata"] = [{"text":"impl&lt;TAlphabet, TState, TOutput&gt; Send for Builder&lt;TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl&lt;'a, TAlphabet, TState, TOutput&gt; Send for InsertionBuilder&lt;'a, TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TAlphabet, TState, TOutput&gt; Send for Automaton&lt;TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TAlphabet, TState, TOutput&gt; Send for Query&lt;'a, TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DebugDotFmt","synthetic":true,"types":[]},{"text":"impl Send for DisplayDotFmt","synthetic":true,"types":[]}];
implementors["peepmatic_runtime"] = [{"text":"impl Send for ConditionCode","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for IntegerId","synthetic":true,"types":[]},{"text":"impl Send for IntegerInterner","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; !Send for Optimizations&lt;TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; Send for Optimization&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Else","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; Send for Increment&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LhsId","synthetic":true,"types":[]},{"text":"impl Send for RhsId","synthetic":true,"types":[]},{"text":"impl Send for MatchOp","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; Send for Action&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; !Send for PeepholeOptimizations&lt;TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'peep, 'ctx, TInstructionSet&gt; !Send for PeepholeOptimizer&lt;'peep, 'ctx, TInstructionSet&gt;","synthetic":true,"types":[]},{"text":"impl Send for Constant","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Part&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Path&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PathId","synthetic":true,"types":[]},{"text":"impl !Send for PathInterner","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for BitWidth","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for UnquoteOperator","synthetic":true,"types":[]}];
implementors["peepmatic_test"] = [{"text":"impl Send for Instruction","synthetic":true,"types":[]},{"text":"impl Send for InstructionData","synthetic":true,"types":[]},{"text":"impl Send for Program","synthetic":true,"types":[]},{"text":"impl Send for TestIsa","synthetic":true,"types":[]},{"text":"impl Send for Immediate","synthetic":true,"types":[]}];
implementors["peepmatic_test_operator"] = [{"text":"impl Send for TestOperator","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Send for TokenStream","synthetic":true,"types":[]},{"text":"impl !Send for LexError","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for Punct","synthetic":true,"types":[]},{"text":"impl !Send for Ident","synthetic":true,"types":[]},{"text":"impl !Send for Literal","synthetic":true,"types":[]},{"text":"impl !Send for TokenTree","synthetic":true,"types":[]},{"text":"impl Send for Delimiter","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl !Send for IntoIter","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Send for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Send for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Send for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for MetaList","synthetic":true,"types":[]},{"text":"impl !Send for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Send for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for VisCrate","synthetic":true,"types":[]},{"text":"impl !Send for VisPublic","synthetic":true,"types":[]},{"text":"impl !Send for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Send for Arm","synthetic":true,"types":[]},{"text":"impl !Send for FieldValue","synthetic":true,"types":[]},{"text":"impl !Send for Label","synthetic":true,"types":[]},{"text":"impl !Send for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Send for ExprArray","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Send for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Send for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Send for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Send for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprBox","synthetic":true,"types":[]},{"text":"impl !Send for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Send for ExprCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprCast","synthetic":true,"types":[]},{"text":"impl !Send for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Send for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Send for ExprField","synthetic":true,"types":[]},{"text":"impl !Send for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Send for ExprIf","synthetic":true,"types":[]},{"text":"impl !Send for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Send for ExprLet","synthetic":true,"types":[]},{"text":"impl !Send for ExprLit","synthetic":true,"types":[]},{"text":"impl !Send for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Send for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Send for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprParen","synthetic":true,"types":[]},{"text":"impl !Send for ExprPath","synthetic":true,"types":[]},{"text":"impl !Send for ExprRange","synthetic":true,"types":[]},{"text":"impl !Send for ExprReference","synthetic":true,"types":[]},{"text":"impl !Send for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Send for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Send for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Send for ExprTry","synthetic":true,"types":[]},{"text":"impl !Send for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Send for ExprType","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Send for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Send for ExprYield","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl !Send for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Send for ConstParam","synthetic":true,"types":[]},{"text":"impl !Send for Generics","synthetic":true,"types":[]},{"text":"impl !Send for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Send for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Send for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Send for PredicateType","synthetic":true,"types":[]},{"text":"impl !Send for TraitBound","synthetic":true,"types":[]},{"text":"impl !Send for TypeParam","synthetic":true,"types":[]},{"text":"impl !Send for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Send for ItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Send for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Send for ItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Send for ItemMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Send for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Send for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Send for ItemType","synthetic":true,"types":[]},{"text":"impl !Send for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Send for ItemUse","synthetic":true,"types":[]},{"text":"impl !Send for Receiver","synthetic":true,"types":[]},{"text":"impl !Send for Signature","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Send for UseGlob","synthetic":true,"types":[]},{"text":"impl !Send for UseGroup","synthetic":true,"types":[]},{"text":"impl !Send for UseName","synthetic":true,"types":[]},{"text":"impl !Send for UsePath","synthetic":true,"types":[]},{"text":"impl !Send for UseRename","synthetic":true,"types":[]},{"text":"impl !Send for File","synthetic":true,"types":[]},{"text":"impl !Send for Lifetime","synthetic":true,"types":[]},{"text":"impl !Send for LitBool","synthetic":true,"types":[]},{"text":"impl !Send for LitByte","synthetic":true,"types":[]},{"text":"impl !Send for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Send for LitChar","synthetic":true,"types":[]},{"text":"impl !Send for LitFloat","synthetic":true,"types":[]},{"text":"impl !Send for LitInt","synthetic":true,"types":[]},{"text":"impl !Send for LitStr","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for DataEnum","synthetic":true,"types":[]},{"text":"impl !Send for DataStruct","synthetic":true,"types":[]},{"text":"impl !Send for DataUnion","synthetic":true,"types":[]},{"text":"impl !Send for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Send for Block","synthetic":true,"types":[]},{"text":"impl !Send for Local","synthetic":true,"types":[]},{"text":"impl !Send for Abi","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Send for TypeArray","synthetic":true,"types":[]},{"text":"impl !Send for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Send for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Send for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Send for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Send for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Send for TypeNever","synthetic":true,"types":[]},{"text":"impl !Send for TypeParen","synthetic":true,"types":[]},{"text":"impl !Send for TypePath","synthetic":true,"types":[]},{"text":"impl !Send for TypePtr","synthetic":true,"types":[]},{"text":"impl !Send for TypeReference","synthetic":true,"types":[]},{"text":"impl !Send for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Send for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Send for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Send for Variadic","synthetic":true,"types":[]},{"text":"impl !Send for FieldPat","synthetic":true,"types":[]},{"text":"impl !Send for PatBox","synthetic":true,"types":[]},{"text":"impl !Send for PatIdent","synthetic":true,"types":[]},{"text":"impl !Send for PatLit","synthetic":true,"types":[]},{"text":"impl !Send for PatMacro","synthetic":true,"types":[]},{"text":"impl !Send for PatOr","synthetic":true,"types":[]},{"text":"impl !Send for PatPath","synthetic":true,"types":[]},{"text":"impl !Send for PatRange","synthetic":true,"types":[]},{"text":"impl !Send for PatReference","synthetic":true,"types":[]},{"text":"impl !Send for PatRest","synthetic":true,"types":[]},{"text":"impl !Send for PatSlice","synthetic":true,"types":[]},{"text":"impl !Send for PatStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatTuple","synthetic":true,"types":[]},{"text":"impl !Send for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatType","synthetic":true,"types":[]},{"text":"impl !Send for PatWild","synthetic":true,"types":[]},{"text":"impl !Send for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Binding","synthetic":true,"types":[]},{"text":"impl !Send for Constraint","synthetic":true,"types":[]},{"text":"impl !Send for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl !Send for PathSegment","synthetic":true,"types":[]},{"text":"impl !Send for QSelf","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Send for Fields","synthetic":true,"types":[]},{"text":"impl !Send for Visibility","synthetic":true,"types":[]},{"text":"impl !Send for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Send for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl !Send for Member","synthetic":true,"types":[]},{"text":"impl !Send for GenericParam","synthetic":true,"types":[]},{"text":"impl !Send for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Send for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Send for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Send for FnArg","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Send for ImplItem","synthetic":true,"types":[]},{"text":"impl !Send for Item","synthetic":true,"types":[]},{"text":"impl !Send for TraitItem","synthetic":true,"types":[]},{"text":"impl !Send for UseTree","synthetic":true,"types":[]},{"text":"impl !Send for Lit","synthetic":true,"types":[]},{"text":"impl Send for StrStyle","synthetic":true,"types":[]},{"text":"impl !Send for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Send for Data","synthetic":true,"types":[]},{"text":"impl !Send for BinOp","synthetic":true,"types":[]},{"text":"impl !Send for UnOp","synthetic":true,"types":[]},{"text":"impl !Send for Stmt","synthetic":true,"types":[]},{"text":"impl !Send for ReturnType","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Pat","synthetic":true,"types":[]},{"text":"impl !Send for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Send for PathArguments","synthetic":true,"types":[]},{"text":"impl !Send for Underscore","synthetic":true,"types":[]},{"text":"impl !Send for Abstract","synthetic":true,"types":[]},{"text":"impl !Send for As","synthetic":true,"types":[]},{"text":"impl !Send for Async","synthetic":true,"types":[]},{"text":"impl !Send for Auto","synthetic":true,"types":[]},{"text":"impl !Send for Await","synthetic":true,"types":[]},{"text":"impl !Send for Become","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for Break","synthetic":true,"types":[]},{"text":"impl !Send for Const","synthetic":true,"types":[]},{"text":"impl !Send for Continue","synthetic":true,"types":[]},{"text":"impl !Send for Crate","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl !Send for Do","synthetic":true,"types":[]},{"text":"impl !Send for Dyn","synthetic":true,"types":[]},{"text":"impl !Send for Else","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl !Send for Final","synthetic":true,"types":[]},{"text":"impl !Send for Fn","synthetic":true,"types":[]},{"text":"impl !Send for For","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for Impl","synthetic":true,"types":[]},{"text":"impl !Send for In","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for Loop","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for Move","synthetic":true,"types":[]},{"text":"impl !Send for Mut","synthetic":true,"types":[]},{"text":"impl !Send for Override","synthetic":true,"types":[]},{"text":"impl !Send for Priv","synthetic":true,"types":[]},{"text":"impl !Send for Pub","synthetic":true,"types":[]},{"text":"impl !Send for Ref","synthetic":true,"types":[]},{"text":"impl !Send for Return","synthetic":true,"types":[]},{"text":"impl !Send for SelfType","synthetic":true,"types":[]},{"text":"impl !Send for SelfValue","synthetic":true,"types":[]},{"text":"impl !Send for Static","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for Super","synthetic":true,"types":[]},{"text":"impl !Send for Trait","synthetic":true,"types":[]},{"text":"impl !Send for Try","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Typeof","synthetic":true,"types":[]},{"text":"impl !Send for Union","synthetic":true,"types":[]},{"text":"impl !Send for Unsafe","synthetic":true,"types":[]},{"text":"impl !Send for Unsized","synthetic":true,"types":[]},{"text":"impl !Send for Use","synthetic":true,"types":[]},{"text":"impl !Send for Virtual","synthetic":true,"types":[]},{"text":"impl !Send for Where","synthetic":true,"types":[]},{"text":"impl !Send for While","synthetic":true,"types":[]},{"text":"impl !Send for Yield","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for AddEq","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for AndAnd","synthetic":true,"types":[]},{"text":"impl !Send for AndEq","synthetic":true,"types":[]},{"text":"impl !Send for At","synthetic":true,"types":[]},{"text":"impl !Send for Bang","synthetic":true,"types":[]},{"text":"impl !Send for Caret","synthetic":true,"types":[]},{"text":"impl !Send for CaretEq","synthetic":true,"types":[]},{"text":"impl !Send for Colon","synthetic":true,"types":[]},{"text":"impl !Send for Colon2","synthetic":true,"types":[]},{"text":"impl !Send for Comma","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for DivEq","synthetic":true,"types":[]},{"text":"impl !Send for Dollar","synthetic":true,"types":[]},{"text":"impl !Send for Dot","synthetic":true,"types":[]},{"text":"impl !Send for Dot2","synthetic":true,"types":[]},{"text":"impl !Send for Dot3","synthetic":true,"types":[]},{"text":"impl !Send for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for EqEq","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for MulEq","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for OrEq","synthetic":true,"types":[]},{"text":"impl !Send for OrOr","synthetic":true,"types":[]},{"text":"impl !Send for Pound","synthetic":true,"types":[]},{"text":"impl !Send for Question","synthetic":true,"types":[]},{"text":"impl !Send for RArrow","synthetic":true,"types":[]},{"text":"impl !Send for LArrow","synthetic":true,"types":[]},{"text":"impl !Send for Rem","synthetic":true,"types":[]},{"text":"impl !Send for RemEq","synthetic":true,"types":[]},{"text":"impl !Send for FatArrow","synthetic":true,"types":[]},{"text":"impl !Send for Semi","synthetic":true,"types":[]},{"text":"impl !Send for Shl","synthetic":true,"types":[]},{"text":"impl !Send for ShlEq","synthetic":true,"types":[]},{"text":"impl !Send for Shr","synthetic":true,"types":[]},{"text":"impl !Send for ShrEq","synthetic":true,"types":[]},{"text":"impl !Send for Star","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for SubEq","synthetic":true,"types":[]},{"text":"impl !Send for Tilde","synthetic":true,"types":[]},{"text":"impl !Send for Brace","synthetic":true,"types":[]},{"text":"impl !Send for Bracket","synthetic":true,"types":[]},{"text":"impl !Send for Paren","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Send for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nothing","synthetic":true,"types":[]}];
implementors["wasi_common"] = [{"text":"impl !Send for WasiCtx","synthetic":true,"types":[]},{"text":"impl !Send for WasiCtxBuilder","synthetic":true,"types":[]},{"text":"impl Send for HandleRights","synthetic":true,"types":[]},{"text":"impl Send for OsDir","synthetic":true,"types":[]},{"text":"impl Send for OsFile","synthetic":true,"types":[]},{"text":"impl Send for OsOther","synthetic":true,"types":[]},{"text":"impl Send for WasiCtxBuilderError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; !Send for Dir&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl Send for DirBuilder","synthetic":true,"types":[]},{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; !Send for File&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl Send for FileType","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl Send for OpenOptions","synthetic":true,"types":[]},{"text":"impl Send for Permissions","synthetic":true,"types":[]},{"text":"impl Send for ReadDir","synthetic":true,"types":[]},{"text":"impl Send for WasiCtx","synthetic":true,"types":[]},{"text":"impl Send for WasiCtxBuilder","synthetic":true,"types":[]},{"text":"impl Send for __wasi_dirent_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_fdstat_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_filestat_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_event_fd_readwrite_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_event_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_subscription_clock_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_subscription_fd_readwrite_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_subscription_u_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_subscription_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_subscription_u_u_t","synthetic":true,"types":[]},{"text":"impl Send for WasiError","synthetic":true,"types":[]},{"text":"impl Send for __wasi_iovec_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_ciovec_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_prestat_dir_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_prestat_t","synthetic":true,"types":[]},{"text":"impl Send for __wasi_prestat_u_t","synthetic":true,"types":[]},{"text":"impl Send for VecFileContents","synthetic":true,"types":[]},{"text":"impl !Send for InMemoryFile","synthetic":true,"types":[]},{"text":"impl !Send for VirtualDir","synthetic":true,"types":[]},{"text":"impl !Send for VirtualDirEntry","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadPipe&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for WritePipe&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Rights","synthetic":true,"types":[]},{"text":"impl Send for Fd","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Iovec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Ciovec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Dirent","synthetic":true,"types":[]},{"text":"impl Send for Fdflags","synthetic":true,"types":[]},{"text":"impl Send for Fdstat","synthetic":true,"types":[]},{"text":"impl Send for Fstflags","synthetic":true,"types":[]},{"text":"impl Send for Lookupflags","synthetic":true,"types":[]},{"text":"impl Send for Oflags","synthetic":true,"types":[]},{"text":"impl Send for Filestat","synthetic":true,"types":[]},{"text":"impl Send for Eventrwflags","synthetic":true,"types":[]},{"text":"impl Send for EventFdReadwrite","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Subclockflags","synthetic":true,"types":[]},{"text":"impl Send for SubscriptionClock","synthetic":true,"types":[]},{"text":"impl Send for SubscriptionFdReadwrite","synthetic":true,"types":[]},{"text":"impl Send for Subscription","synthetic":true,"types":[]},{"text":"impl Send for Riflags","synthetic":true,"types":[]},{"text":"impl Send for Roflags","synthetic":true,"types":[]},{"text":"impl Send for Sdflags","synthetic":true,"types":[]},{"text":"impl Send for PrestatDir","synthetic":true,"types":[]},{"text":"impl Send for Clockid","synthetic":true,"types":[]},{"text":"impl Send for Errno","synthetic":true,"types":[]},{"text":"impl Send for Whence","synthetic":true,"types":[]},{"text":"impl Send for Filetype","synthetic":true,"types":[]},{"text":"impl Send for Advice","synthetic":true,"types":[]},{"text":"impl Send for Eventtype","synthetic":true,"types":[]},{"text":"impl Send for SubscriptionU","synthetic":true,"types":[]},{"text":"impl Send for Signal","synthetic":true,"types":[]},{"text":"impl Send for Preopentype","synthetic":true,"types":[]},{"text":"impl Send for Prestat","synthetic":true,"types":[]}];
implementors["wasmtime"] = [{"text":"impl !Send for Global","synthetic":true,"types":[]},{"text":"impl !Send for Table","synthetic":true,"types":[]},{"text":"impl !Send for Memory","synthetic":true,"types":[]},{"text":"impl&lt;'instance&gt; !Send for Export&lt;'instance&gt;","synthetic":true,"types":[]},{"text":"impl Send for FrameInfo","synthetic":true,"types":[]},{"text":"impl !Send for Func","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Caller&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Instance","synthetic":true,"types":[]},{"text":"impl !Send for Linker","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl !Send for ExternRef","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Engine","synthetic":true,"types":[]},{"text":"impl !Send for Store","synthetic":true,"types":[]},{"text":"impl Send for InterruptHandle","synthetic":true,"types":[]},{"text":"impl Send for Trap","synthetic":true,"types":[]},{"text":"impl Send for Limits","synthetic":true,"types":[]},{"text":"impl Send for FuncType","synthetic":true,"types":[]},{"text":"impl Send for GlobalType","synthetic":true,"types":[]},{"text":"impl Send for TableType","synthetic":true,"types":[]},{"text":"impl Send for MemoryType","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; Send for ImportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; Send for ExportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl Send for Strategy","synthetic":true,"types":[]},{"text":"impl Send for OptLevel","synthetic":true,"types":[]},{"text":"impl Send for ProfilingStrategy","synthetic":true,"types":[]},{"text":"impl Send for Mutability","synthetic":true,"types":[]},{"text":"impl Send for ValType","synthetic":true,"types":[]},{"text":"impl Send for ExternType","synthetic":true,"types":[]},{"text":"impl !Send for Val","synthetic":true,"types":[]}];
implementors["wasmtime_cache"] = [{"text":"impl Send for CacheConfig","synthetic":true,"types":[]},{"text":"impl&lt;'config&gt; Send for ModuleCacheEntry&lt;'config&gt;","synthetic":true,"types":[]}];
implementors["wasmtime_cranelift"] = [{"text":"impl Send for Cranelift","synthetic":true,"types":[]}];
implementors["wasmtime_debug"] = [{"text":"impl Send for DwarfSection","synthetic":true,"types":[]},{"text":"impl Send for DwarfSectionRelocTarget","synthetic":true,"types":[]}];
implementors["wasmtime_environ"] = [{"text":"impl Send for InstructionAddressMap","synthetic":true,"types":[]},{"text":"impl Send for FunctionAddressMap","synthetic":true,"types":[]},{"text":"impl Send for BuiltinFunctionIndex","synthetic":true,"types":[]},{"text":"impl Send for CompiledFunction","synthetic":true,"types":[]},{"text":"impl Send for Relocation","synthetic":true,"types":[]},{"text":"impl Send for TrapInformation","synthetic":true,"types":[]},{"text":"impl Send for StackMapInformation","synthetic":true,"types":[]},{"text":"impl Send for MemoryPlan","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl Send for TableElements","synthetic":true,"types":[]},{"text":"impl Send for TablePlan","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for ModuleEnvironment&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for ModuleTranslation&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FunctionBodyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DebugInfoData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NameSection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for WasmFileInfo","synthetic":true,"types":[]},{"text":"impl Send for FunctionMetadata","synthetic":true,"types":[]},{"text":"impl Send for DataInitializerLocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for DataInitializer&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for Tunables","synthetic":true,"types":[]},{"text":"impl Send for TargetSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl Send for VMOffsets","synthetic":true,"types":[]},{"text":"impl Send for ModuleMemoryOffset","synthetic":true,"types":[]},{"text":"impl Send for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Send for CompileError","synthetic":true,"types":[]},{"text":"impl Send for EntityIndex","synthetic":true,"types":[]},{"text":"impl Send for MemoryStyle","synthetic":true,"types":[]},{"text":"impl Send for TableStyle","synthetic":true,"types":[]}];
implementors["wasmtime_fuzzing"] = [{"text":"impl Send for DifferentialConfig","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for SpecTest","synthetic":true,"types":[]},{"text":"impl Send for TableOps","synthetic":true,"types":[]}];
implementors["wasmtime_jit"] = [{"text":"impl Send for CodeMemory","synthetic":true,"types":[]},{"text":"impl Send for Compilation","synthetic":true,"types":[]},{"text":"impl Send for Compiler","synthetic":true,"types":[]},{"text":"impl Send for CompilationArtifacts","synthetic":true,"types":[]},{"text":"impl Send for CompiledModule","synthetic":true,"types":[]},{"text":"impl Send for CompilationStrategy","synthetic":true,"types":[]},{"text":"impl Send for SetupError","synthetic":true,"types":[]},{"text":"impl Send for TrampolineRelocSink","synthetic":true,"types":[]}];
implementors["wasmtime_lightbeam"] = [{"text":"impl Send for Lightbeam","synthetic":true,"types":[]}];
implementors["wasmtime_obj"] = [{"text":"impl&lt;'a&gt; Send for ObjectBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ObjectBuilderTarget","synthetic":true,"types":[]}];
implementors["wasmtime_profiling"] = [{"text":"impl Send for JitDumpAgent","synthetic":true,"types":[]},{"text":"impl Send for VTuneAgent","synthetic":true,"types":[]},{"text":"impl Send for NullProfilerAgent","synthetic":true,"types":[]}];
implementors["wasmtime_runtime"] = [{"text":"impl !Send for ExportFunction","synthetic":true,"types":[]},{"text":"impl !Send for ExportTable","synthetic":true,"types":[]},{"text":"impl !Send for ExportMemory","synthetic":true,"types":[]},{"text":"impl !Send for ExportGlobal","synthetic":true,"types":[]},{"text":"impl !Send for VMExternRef","synthetic":true,"types":[]},{"text":"impl !Send for VMExternRefActivationsTable","synthetic":true,"types":[]},{"text":"impl !Send for StackMapRegistry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Imports&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for InstanceHandle","synthetic":true,"types":[]},{"text":"impl Send for LinkError","synthetic":true,"types":[]},{"text":"impl Send for Mmap","synthetic":true,"types":[]},{"text":"impl Send for SignatureRegistry","synthetic":true,"types":[]},{"text":"impl !Send for Table","synthetic":true,"types":[]},{"text":"impl !Send for VMCallerCheckedAnyfunc","synthetic":true,"types":[]},{"text":"impl Send for VMContext","synthetic":true,"types":[]},{"text":"impl Send for VMFunctionBody","synthetic":true,"types":[]},{"text":"impl !Send for VMFunctionImport","synthetic":true,"types":[]},{"text":"impl Send for VMGlobalDefinition","synthetic":true,"types":[]},{"text":"impl !Send for VMGlobalImport","synthetic":true,"types":[]},{"text":"impl Send for VMInterrupts","synthetic":true,"types":[]},{"text":"impl Send for VMInvokeArgument","synthetic":true,"types":[]},{"text":"impl !Send for VMMemoryDefinition","synthetic":true,"types":[]},{"text":"impl !Send for VMMemoryImport","synthetic":true,"types":[]},{"text":"impl Send for VMSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl !Send for VMTableDefinition","synthetic":true,"types":[]},{"text":"impl !Send for VMTableImport","synthetic":true,"types":[]},{"text":"impl !Send for Export","synthetic":true,"types":[]},{"text":"impl Send for InstantiationError","synthetic":true,"types":[]},{"text":"impl !Send for TableElement","synthetic":true,"types":[]},{"text":"impl Send for Trap","synthetic":true,"types":[]},{"text":"impl Send for GdbJitImageRegistration","synthetic":false,"types":[]}];
implementors["wasmtime_wasi"] = [{"text":"impl !Send for Wasi","synthetic":true,"types":[]},{"text":"impl !Send for Wasi","synthetic":true,"types":[]}];
implementors["wasmtime_wast"] = [{"text":"impl !Send for WastContext","synthetic":true,"types":[]}];
implementors["wasmtime_wiggle"] = [{"text":"impl !Send for WasmtimeGuestMemory","synthetic":true,"types":[]}];
implementors["wiggle"] = [{"text":"impl Send for Region","synthetic":true,"types":[]},{"text":"impl Send for BorrowHandle","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for GuestPtr&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for GuestSlice&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for GuestStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GuestError","synthetic":true,"types":[]}];
implementors["wiggle_generate"] = [{"text":"impl !Send for ErrorTransform","synthetic":true,"types":[]},{"text":"impl !Send for UserErrorType","synthetic":true,"types":[]},{"text":"impl !Send for Names","synthetic":true,"types":[]},{"text":"impl !Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Paths","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl !Send for CtxConf","synthetic":true,"types":[]},{"text":"impl !Send for ErrorConf","synthetic":true,"types":[]},{"text":"impl !Send for ErrorConfField","synthetic":true,"types":[]},{"text":"impl !Send for ConfigField","synthetic":true,"types":[]},{"text":"impl Send for WitxConf","synthetic":true,"types":[]}];
implementors["wiggle_test"] = [{"text":"impl Send for MemAreas","synthetic":true,"types":[]},{"text":"impl Send for HostMemory","synthetic":true,"types":[]},{"text":"impl Send for MemArea","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WasiCtx&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["witx"] = [{"text":"impl !Send for Document","synthetic":true,"types":[]},{"text":"impl Send for EnumDatatype","synthetic":true,"types":[]},{"text":"impl Send for EnumVariant","synthetic":true,"types":[]},{"text":"impl Send for FlagsDatatype","synthetic":true,"types":[]},{"text":"impl Send for FlagsMember","synthetic":true,"types":[]},{"text":"impl !Send for HandleDatatype","synthetic":true,"types":[]},{"text":"impl Send for Id","synthetic":true,"types":[]},{"text":"impl Send for IntConst","synthetic":true,"types":[]},{"text":"impl Send for IntDatatype","synthetic":true,"types":[]},{"text":"impl !Send for InterfaceFunc","synthetic":true,"types":[]},{"text":"impl !Send for InterfaceFuncParam","synthetic":true,"types":[]},{"text":"impl !Send for Module","synthetic":true,"types":[]},{"text":"impl Send for ModuleImport","synthetic":true,"types":[]},{"text":"impl !Send for NamedType","synthetic":true,"types":[]},{"text":"impl !Send for StructDatatype","synthetic":true,"types":[]},{"text":"impl !Send for StructMember","synthetic":true,"types":[]},{"text":"impl !Send for UnionDatatype","synthetic":true,"types":[]},{"text":"impl !Send for UnionVariant","synthetic":true,"types":[]},{"text":"impl !Send for CoreFuncType","synthetic":true,"types":[]},{"text":"impl !Send for CoreParamType","synthetic":true,"types":[]},{"text":"impl Send for Filesystem","synthetic":true,"types":[]},{"text":"impl Send for MockFs","synthetic":true,"types":[]},{"text":"impl Send for SizeAlign","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for StructMemberLayout&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnionLayout","synthetic":true,"types":[]},{"text":"impl Send for Location","synthetic":true,"types":[]},{"text":"impl Send for BuiltinType","synthetic":true,"types":[]},{"text":"impl !Send for Definition","synthetic":true,"types":[]},{"text":"impl !Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for IntRepr","synthetic":true,"types":[]},{"text":"impl Send for InterfaceFuncParamPosition","synthetic":true,"types":[]},{"text":"impl !Send for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl !Send for ModuleEntry","synthetic":true,"types":[]},{"text":"impl Send for ModuleImportVariant","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for TypeRef","synthetic":true,"types":[]},{"text":"impl Send for AtomType","synthetic":true,"types":[]},{"text":"impl Send for CoreParamSignifies","synthetic":true,"types":[]},{"text":"impl Send for TypePassedBy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DeclSyntax&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SExpr","synthetic":true,"types":[]},{"text":"impl Send for RepEquality","synthetic":true,"types":[]},{"text":"impl Send for ValidationError","synthetic":true,"types":[]},{"text":"impl Send for WitxError","synthetic":true,"types":[]},{"text":"impl !Send for Polyfill","synthetic":true,"types":[]},{"text":"impl !Send for ModulePolyfill","synthetic":true,"types":[]},{"text":"impl !Send for FuncPolyfill","synthetic":true,"types":[]},{"text":"impl !Send for ParamPolyfill","synthetic":true,"types":[]},{"text":"impl Send for PolyfillError","synthetic":true,"types":[]},{"text":"impl !Send for ParamUnknown","synthetic":true,"types":[]},{"text":"impl !Send for TypePolyfill","synthetic":true,"types":[]}];
implementors["yanix"] = [{"text":"impl Send for ClockId","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for SeekLoc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DirIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FdFlags","synthetic":true,"types":[]},{"text":"impl Send for AtFlags","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for OFlags","synthetic":true,"types":[]},{"text":"impl Send for FileType","synthetic":true,"types":[]},{"text":"impl Send for FileTime","synthetic":true,"types":[]},{"text":"impl Send for PollFlags","synthetic":true,"types":[]},{"text":"impl Send for PollFd","synthetic":true,"types":[]},{"text":"impl Send for SockType","synthetic":true,"types":[]},{"text":"impl Send for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl Send for Dir","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()