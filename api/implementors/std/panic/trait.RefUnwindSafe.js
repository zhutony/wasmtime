(function() {var implementors = {};
implementors["clif_json"] = [{"text":"impl RefUnwindSafe for SerInst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SerBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SerDataFlowGraph","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SerSignature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SerFunction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SerObj","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SerInstData","synthetic":true,"types":[]}];
implementors["clif_util"] = [{"text":"impl RefUnwindSafe for TestOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PassOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompiledWithoutSupportOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Commands","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoveInst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplaceInstWithConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplaceInstWithTrap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoveInstToEntryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoveBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplaceBlockParamWithConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoveUnusedEntities","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergeBlocks","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CrashCheckContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgressStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrintRelocs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrintTraps","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrintStackMaps","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileInterpreter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FileInterpreterFailure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedFlagsOrIsa","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]}];
implementors["cranelift_bforest"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, C&gt; RefUnwindSafe for MapCursor&lt;'a, K, V, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for MapForest&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for MapIter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for Set&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C&gt; RefUnwindSafe for SetCursor&lt;'a, K, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for SetForest&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; RefUnwindSafe for SetIter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_codegen"] = [{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueLocRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodegenError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for MemoryCodeSink&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullRelocSink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullStackMapSink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullTrapSink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegDiversions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reloc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CFGPrinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; RefUnwindSafe for FuncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !RefUnwindSafe for EncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CursorPosition","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for DisplayList&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DominatorTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DominatorTreePreorder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ChildIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockPredecessor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PredIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f, IIB&gt; RefUnwindSafe for InsertBuilder&lt;'f, IIB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IIB: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; RefUnwindSafe for ReplaceBuilder&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbiParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtFuncData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeapData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgramPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceLoc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueLabel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueLabelStart","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtomicRmwOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgumentExtension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgumentPurpose","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExternalName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalValueData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeapStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LibCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpandedProgramPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrapCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgumentLoc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueLoc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueLabelAssignments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstantData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstantPoolEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstantPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DisplayInst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackSlot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Immediate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JumpTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Heap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnyEntity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Function","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DisplayFunctionAnnotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DisplayFunction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for InstOffsetIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Imm64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uimm64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uimm32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for V128Imm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Offset32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ieee32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ieee64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VariableArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpcodeConstraints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueTypeSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstructionFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstructionData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Opcode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BranchInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CallInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolvedConstraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JumpTableData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Layout","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; RefUnwindSafe for Blocks&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; RefUnwindSafe for Insts&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackSlotData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackLayoutInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackSlots","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackSlotKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BranchRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OperandConstraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecipeConstraints","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Encodings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackBaseMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetFrontendConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallConv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstraintKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LookupError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnwindInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnwindInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegisterMappingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnwindInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegBank","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegClassData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegClassIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DisplayRegUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoopAnalysis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MachCompileResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MachTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LowerInput","synthetic":true,"types":[]},{"text":"impl&lt;'func, I&gt; !RefUnwindSafe for Lower&lt;'func, I&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelocDistance","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for VCode&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for VCodeBuilder&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockLoweringOrder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoweredBlock","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; RefUnwindSafe for ABICalleeImpl&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as ABIMachineSpec&gt;::I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; RefUnwindSafe for ABICallerImpl&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ABIArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgsOrRets","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstIsSafepoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackAMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallDest","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MachBuffer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as MachInst&gt;::LabelUse: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MachBufferFinalized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MachLabel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MachSrcLoc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MachStackMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackMapExtent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TargetIsaAdapter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtomicRmwOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PredicateView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for FlagsOrIsa&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Regalloc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OptLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsModel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LibcallCallConv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Template","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Descriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Detail","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PassTimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimingToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifierError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifierErrors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlainWriter","synthetic":true,"types":[]}];
implementors["cranelift_codegen_meta"] = [{"text":"impl !RefUnwindSafe for Def","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Var","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarIndex","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VarPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Apply","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyConstant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DummyDef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternPosition","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DummyExpr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CpuMode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EncodingContent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EncodingBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FormatField","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstructionFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormatStructure","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstructionFormatBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpcodeNumber","synthetic":true,"types":[]},{"text":"impl&lt;'all_inst&gt; !RefUnwindSafe for InstructionGroupBuilder&lt;'all_inst&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstructionGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PolymorphicInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstructionContent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstructionBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoundInstruction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormatPredicateNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstructionPredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstructionPredicateNumber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstructionPredicateRegistry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueTypeOrAny","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindParameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Immediate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormatPredicateKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePredicateNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstructionPredicateNode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstSpec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TargetIsa","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Operand","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OperandKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OperandKindFields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Register","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stack","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BranchRange","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EncodingRecipe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodingRecipeNumber","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EncodingRecipeBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OperandConstraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegBankIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegBank","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegClassIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegClassBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegBankBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsaRegsBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsaRegs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegClassProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoolSettingIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoolSetting","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Setting","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PresetIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Preset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SettingGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtoSetting","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtoPredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Predicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SettingGroupBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecificSetting","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PresetType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtoSpecificSetting","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateNode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeEnvironment","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeEnvRank","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LaneTypeIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VectorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialTypeIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferenceType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferenceTypeIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LaneType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeVarContent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeVar","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeVarParent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSetBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DerivedFunc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TransformGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransformGroupIndex","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TransformGroupBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TransformGroups","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Formatter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Isa","synthetic":true,"types":[]},{"text":"impl&lt;'defs&gt; !RefUnwindSafe for PerCpuModeEncodings&lt;'defs&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RecipeGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PerCpuModeEncodings","synthetic":true,"types":[]},{"text":"impl&lt;'builder&gt; !RefUnwindSafe for RecipeGroup&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'builder&gt; !RefUnwindSafe for Template&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecipePrefixKind","synthetic":true,"types":[]},{"text":"impl&lt;'cpu_mode&gt; !RefUnwindSafe for Level1Table&lt;'cpu_mode&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level2HashTableEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Level2Table","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Encoder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EncodingList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParentGroup","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SettingOrPreset&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Definitions","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EntityRefs","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Formats","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Immediates","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoolIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferenceIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Float","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reference","synthetic":true,"types":[]},{"text":"impl&lt;'entries, T&gt; RefUnwindSafe for UniqueTable&lt;'entries, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for UniqueSeqTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_codegen_shared"] = [{"text":"impl RefUnwindSafe for IntCC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatCC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodingBits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpcodePrefix","synthetic":true,"types":[]}];
implementors["cranelift_entity"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for BoxedSlice&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for Keys&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EntityList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ListPool&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for SecondaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for PrimaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for EntitySet&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for SparseMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PackedOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_filetests"] = [{"text":"impl !RefUnwindSafe for SingleFunctionCompiler","synthetic":true,"types":[]}];
implementors["cranelift_frontend"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for FunctionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionBuilderContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Switch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variable","synthetic":true,"types":[]}];
implementors["cranelift_interpreter"] = [{"text":"impl RefUnwindSafe for Environment","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interpreter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trap","synthetic":true,"types":[]}];
implementors["cranelift_module"] = [{"text":"impl RefUnwindSafe for DataContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataDescription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Module&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledData: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ModuleFunction&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for ModuleNamespace&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledData: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrapSite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Init","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncOrDataId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Linkage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleError","synthetic":true,"types":[]}];
implementors["cranelift_object"] = [{"text":"impl !RefUnwindSafe for ObjectBackend","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ObjectBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectProduct","synthetic":true,"types":[]}];
implementors["cranelift_reader"] = [{"text":"impl RefUnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Invocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceMap","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TestCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Comment&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Details&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TestFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IsaSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseOptionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comparison","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataValueCastFailure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunCommand","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TestOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Feature&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["cranelift_simplejit"] = [{"text":"impl !RefUnwindSafe for SimpleJITBackend","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SimpleJITBuilder","synthetic":true,"types":[]}];
implementors["cranelift_wasm"] = [{"text":"impl RefUnwindSafe for DummyEnvironment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmFuncType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncTranslator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncTranslationState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleTranslationState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefinedFuncIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefinedGlobalIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefinedMemoryIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefinedTableIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElemIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Memory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalVariable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalInit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableElementType","synthetic":true,"types":[]}];
implementors["lightbeam"] = [{"text":"impl&lt;'module, M&gt; !RefUnwindSafe for CodeGenSession&lt;'module, M&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullOffsetSink","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Sinks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExecutableModule","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TranslatedModule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecutionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ieee32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ieee64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignfulInt","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; RefUnwindSafe for BrTable&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; RefUnwindSafe for BrTargetDrop&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryImmediate","synthetic":true,"types":[]},{"text":"impl&lt;'a, M&gt; RefUnwindSafe for MicrowasmConv&lt;'a, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpSig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signedness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Size","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Type&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NameTag","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; RefUnwindSafe for BrTarget&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Label&gt; RefUnwindSafe for Operator&lt;Label&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Label: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["peepmatic"] = [{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for Optimizations&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for Optimization&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for Lhs&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for Integer&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for Boolean&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; RefUnwindSafe for ConditionCode&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; RefUnwindSafe for Constant&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; RefUnwindSafe for Variable&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator, TOperand&gt; !RefUnwindSafe for Operation&lt;'a, TOperator, TOperand&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for Precondition&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for Unquote&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for Dfs&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyError","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for DynAstRef&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for Pattern&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for ValueLiteral&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for ConstraintOperand&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !RefUnwindSafe for Rhs&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraversalEvent","synthetic":true,"types":[]}];
implementors["peepmatic_automata"] = [{"text":"impl&lt;TAlphabet, TState, TOutput&gt; RefUnwindSafe for Builder&lt;TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;'a, TAlphabet, TState, TOutput&gt; RefUnwindSafe for InsertionBuilder&lt;'a, TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TAlphabet, TState, TOutput&gt; RefUnwindSafe for Automaton&lt;TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TAlphabet, TState, TOutput&gt; RefUnwindSafe for Query&lt;'a, TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugDotFmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisplayDotFmt","synthetic":true,"types":[]}];
implementors["peepmatic_runtime"] = [{"text":"impl RefUnwindSafe for ConditionCode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntegerId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntegerInterner","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; !RefUnwindSafe for Optimizations&lt;TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; RefUnwindSafe for Optimization&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; RefUnwindSafe for Increment&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LhsId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RhsId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchOp","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; RefUnwindSafe for Action&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; !RefUnwindSafe for PeepholeOptimizations&lt;TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'peep, 'ctx, TInstructionSet&gt; !RefUnwindSafe for PeepholeOptimizer&lt;'peep, 'ctx, TInstructionSet&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constant","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Part&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Path&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathInterner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitWidth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnquoteOperator","synthetic":true,"types":[]}];
implementors["peepmatic_test"] = [{"text":"impl RefUnwindSafe for Instruction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstructionData","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Program","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestIsa","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Immediate","synthetic":true,"types":[]}];
implementors["peepmatic_test_operator"] = [{"text":"impl RefUnwindSafe for TestOperator","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["wasi_common"] = [{"text":"impl !RefUnwindSafe for WasiCtx","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WasiCtxBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HandleRights","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OsDir","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OsFile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OsOther","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WasiCtxBuilderError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; !RefUnwindSafe for Dir&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; !RefUnwindSafe for File&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Permissions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadDir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasiCtx","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasiCtxBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_dirent_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_fdstat_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_filestat_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_event_fd_readwrite_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_clock_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_fd_readwrite_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_u_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_u_u_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasiError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_iovec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_ciovec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_prestat_dir_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_prestat_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_prestat_u_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VecFileContents","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InMemoryFile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VirtualDir","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VirtualDirEntry","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadPipe&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WritePipe&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rights","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fd","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Iovec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Ciovec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dirent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fdflags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fdstat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fstflags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lookupflags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Oflags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Filestat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eventrwflags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventFdReadwrite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Subclockflags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubscriptionClock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubscriptionFdReadwrite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Subscription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Riflags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Roflags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sdflags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrestatDir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Clockid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Filetype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Advice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eventtype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubscriptionU","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Preopentype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Prestat","synthetic":true,"types":[]}];
implementors["wasmtime"] = [{"text":"impl !RefUnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Memory","synthetic":true,"types":[]},{"text":"impl&lt;'instance&gt; !RefUnwindSafe for Export&lt;'instance&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Func","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Caller&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Instance","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Linker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternRef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Engine","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Store","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterruptHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Trap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryType","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; RefUnwindSafe for ImportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; RefUnwindSafe for ExportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Strategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OptLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProfilingStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mutability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExternType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Val","synthetic":true,"types":[]}];
implementors["wasmtime_cache"] = [{"text":"impl RefUnwindSafe for CacheConfig","synthetic":true,"types":[]},{"text":"impl&lt;'config&gt; RefUnwindSafe for ModuleCacheEntry&lt;'config&gt;","synthetic":true,"types":[]}];
implementors["wasmtime_cranelift"] = [{"text":"impl RefUnwindSafe for Cranelift","synthetic":true,"types":[]}];
implementors["wasmtime_debug"] = [{"text":"impl RefUnwindSafe for DwarfSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwarfSectionRelocTarget","synthetic":true,"types":[]}];
implementors["wasmtime_environ"] = [{"text":"impl RefUnwindSafe for InstructionAddressMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionAddressMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuiltinFunctionIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompiledFunction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Relocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrapInformation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackMapInformation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryPlan","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableElements","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TablePlan","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; RefUnwindSafe for ModuleEnvironment&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; RefUnwindSafe for ModuleTranslation&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FunctionBodyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DebugInfoData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NameSection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmFileInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataInitializerLocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; RefUnwindSafe for DataInitializer&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tunables","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMOffsets","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleMemoryOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelocationTarget","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompileError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntityIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableStyle","synthetic":true,"types":[]}];
implementors["wasmtime_fuzzing"] = [{"text":"impl RefUnwindSafe for DifferentialConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecTest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableOps","synthetic":true,"types":[]}];
implementors["wasmtime_jit"] = [{"text":"impl RefUnwindSafe for CodeMemory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compilation","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Compiler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompilationArtifacts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompiledModule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompilationStrategy","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SetupError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrampolineRelocSink","synthetic":true,"types":[]}];
implementors["wasmtime_lightbeam"] = [{"text":"impl RefUnwindSafe for Lightbeam","synthetic":true,"types":[]}];
implementors["wasmtime_obj"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for ObjectBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectBuilderTarget","synthetic":true,"types":[]}];
implementors["wasmtime_profiling"] = [{"text":"impl RefUnwindSafe for JitDumpAgent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VTuneAgent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullProfilerAgent","synthetic":true,"types":[]}];
implementors["wasmtime_runtime"] = [{"text":"impl RefUnwindSafe for ExportFunction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportMemory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportGlobal","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMExternRef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMExternRefActivationsTable","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StackMapRegistry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Imports&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstanceHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GdbJitImageRegistration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mmap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureRegistry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMCallerCheckedAnyfunc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMFunctionBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMFunctionImport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMGlobalDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMGlobalImport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMInterrupts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMInvokeArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMMemoryDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMMemoryImport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMTableDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMTableImport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Export","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstantiationError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TableElement","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Trap","synthetic":true,"types":[]}];
implementors["wasmtime_wasi"] = [{"text":"impl !RefUnwindSafe for Wasi","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Wasi","synthetic":true,"types":[]}];
implementors["wasmtime_wast"] = [{"text":"impl !RefUnwindSafe for WastContext","synthetic":true,"types":[]}];
implementors["wasmtime_wiggle"] = [{"text":"impl !RefUnwindSafe for WasmtimeGuestMemory","synthetic":true,"types":[]}];
implementors["wiggle"] = [{"text":"impl RefUnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BorrowHandle","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for GuestPtr&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for GuestSlice&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for GuestStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GuestError","synthetic":true,"types":[]}];
implementors["wiggle_generate"] = [{"text":"impl !RefUnwindSafe for ErrorTransform","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UserErrorType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Names","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paths","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CtxConf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorConf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorConfField","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConfigField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WitxConf","synthetic":true,"types":[]}];
implementors["wiggle_test"] = [{"text":"impl RefUnwindSafe for MemAreas","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HostMemory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemArea","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for WasiCtx&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["witx"] = [{"text":"impl !RefUnwindSafe for Document","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumDatatype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumVariant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsDatatype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsMember","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HandleDatatype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntDatatype","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InterfaceFunc","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InterfaceFuncParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleImport","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NamedType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StructDatatype","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StructMember","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnionDatatype","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnionVariant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoreFuncType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoreParamType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Filesystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MockFs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SizeAlign","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for StructMemberLayout&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnionLayout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuiltinType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Definition","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntRepr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceFuncParamPosition","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ModuleEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleImportVariant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtomType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoreParamSignifies","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePassedBy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DeclSyntax&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepEquality","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValidationError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WitxError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Polyfill","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ModulePolyfill","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FuncPolyfill","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParamPolyfill","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PolyfillError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParamUnknown","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypePolyfill","synthetic":true,"types":[]}];
implementors["yanix"] = [{"text":"impl RefUnwindSafe for ClockId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeekLoc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DirIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PosixFadviseAdvice","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()