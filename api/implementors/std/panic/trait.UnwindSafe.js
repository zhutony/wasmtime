(function() {var implementors = {};
implementors["clif_json"] = [{"text":"impl UnwindSafe for SerInst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SerBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SerDataFlowGraph","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SerSignature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SerFunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SerObj","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SerInstData","synthetic":true,"types":[]}];
implementors["clif_util"] = [{"text":"impl UnwindSafe for TestOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PassOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompiledWithoutSupportOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Commands","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoveInst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplaceInstWithConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplaceInstWithTrap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveInstToEntryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoveBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplaceBlockParamWithConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoveUnusedEntities","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergeBlocks","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CrashCheckContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgressStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrintRelocs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrintTraps","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrintStackMaps","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileInterpreter","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FileInterpreterFailure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedFlagsOrIsa","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]}];
implementors["cranelift_bforest"] = [{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, C&gt; !UnwindSafe for MapCursor&lt;'a, K, V, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for MapForest&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for MapIter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for Set&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, C&gt; !UnwindSafe for SetCursor&lt;'a, K, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for SetForest&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; UnwindSafe for SetIter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_codegen"] = [{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueLocRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CodegenError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for MemoryCodeSink&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NullRelocSink","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NullStackMapSink","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NullTrapSink","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackMap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegDiversions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CodeInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reloc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CFGPrinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !UnwindSafe for FuncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !UnwindSafe for EncCursor&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CursorPosition","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for DisplayList&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DominatorTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DominatorTreePreorder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ChildIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockPredecessor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PredIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f, IIB&gt; UnwindSafe for InsertBuilder&lt;'f, IIB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IIB: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !UnwindSafe for ReplaceBuilder&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbiParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtFuncData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeapData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgramPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourceLoc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueLabel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueLabelStart","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtomicRmwOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgumentExtension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgumentPurpose","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExternalName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalValueData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeapStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LibCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpandedProgramPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrapCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgumentLoc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueLoc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueLabelAssignments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstantData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstantPoolEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstantPool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataFlowGraph","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for DisplayInst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackSlot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Immediate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JumpTable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FuncRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Heap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnyEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Function","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for DisplayFunctionAnnotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for DisplayFunction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for InstOffsetIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Imm64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uimm64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uimm32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for V128Imm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Offset32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ieee32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ieee64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VariableArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpcodeConstraints","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueTypeSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstructionFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstructionData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Opcode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BranchInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CallInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolvedConstraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JumpTableData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Layout","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; UnwindSafe for Blocks&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; UnwindSafe for Insts&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackSlotData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackLayoutInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackSlots","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackSlotKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BranchRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OperandConstraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecipeConstraints","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Encodings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackBaseMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetFrontendConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CallConv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstraintKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackBase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LookupError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnwindInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnwindInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegisterMappingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnwindInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegBank","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegClassData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegClassIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DisplayRegUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoopAnalysis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MachCompileResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MachTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LowerInput","synthetic":true,"types":[]},{"text":"impl&lt;'func, I&gt; !UnwindSafe for Lower&lt;'func, I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RelocDistance","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for VCode&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for VCodeBuilder&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockLoweringOrder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoweredBlock","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; UnwindSafe for ABICalleeImpl&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as ABIMachineSpec&gt;::I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; UnwindSafe for ABICallerImpl&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ABIArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgsOrRets","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstIsSafepoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackAMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CallDest","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MachBuffer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as MachInst&gt;::LabelUse: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MachBufferFinalized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MachLabel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MachSrcLoc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MachStackMap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackMapExtent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TargetIsaAdapter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtomicRmwOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PredicateView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for FlagsOrIsa&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regalloc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OptLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsModel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LibcallCallConv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Template","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Descriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Detail","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PassTimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimingToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerifierError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerifierErrors","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlainWriter","synthetic":true,"types":[]}];
implementors["cranelift_codegen_meta"] = [{"text":"impl !UnwindSafe for Def","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DefPool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Var","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarIndex","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for VarPool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Apply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DummyVar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DummyConstant","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DummyDef","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ExprBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatternPosition","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DummyExpr","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CpuMode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingContent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FormatField","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InstructionFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormatStructure","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InstructionFormatBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpcodeNumber","synthetic":true,"types":[]},{"text":"impl&lt;'all_inst&gt; !UnwindSafe for InstructionGroupBuilder&lt;'all_inst&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InstructionGroup","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PolymorphicInfo","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InstructionContent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InstructionBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BoundInstruction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormatPredicateNode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstructionPredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstructionPredicateNumber","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstructionPredicateRegistry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueTypeOrAny","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindParameter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Immediate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormatPredicateKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePredicateNode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstructionPredicateNode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InstSpec","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TargetIsa","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Operand","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OperandKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OperandKindFields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Register","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stack","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BranchRange","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingRecipe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncodingRecipeNumber","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingRecipeBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OperandConstraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegBankIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegBank","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegClassIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegClassBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegBankBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsaRegsBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsaRegs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegClassProto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolSettingIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolSetting","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Setting","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PresetIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Preset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SettingGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtoSetting","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtoPredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Predicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SettingGroupBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecificSetting","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PresetType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtoSpecificSetting","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateNode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TypeEnvironment","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeEnvRank","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LaneTypeIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VectorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialTypeIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferenceType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferenceTypeIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LaneType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TypeVarContent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TypeVar","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TypeVarParent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSetBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DerivedFunc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TransformGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransformGroupIndex","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TransformGroupBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TransformGroups","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Formatter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Isa","synthetic":true,"types":[]},{"text":"impl&lt;'defs&gt; !UnwindSafe for PerCpuModeEncodings&lt;'defs&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RecipeGroup","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PerCpuModeEncodings","synthetic":true,"types":[]},{"text":"impl&lt;'builder&gt; !UnwindSafe for RecipeGroup&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'builder&gt; !UnwindSafe for Template&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecipePrefixKind","synthetic":true,"types":[]},{"text":"impl&lt;'cpu_mode&gt; !UnwindSafe for Level1Table&lt;'cpu_mode&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level2HashTableEntry","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Level2Table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Encoder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParentGroup","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SettingOrPreset&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Definitions","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EntityRefs","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Formats","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Immediates","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferenceIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Int","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reference","synthetic":true,"types":[]},{"text":"impl&lt;'entries, T&gt; UnwindSafe for UniqueTable&lt;'entries, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for UniqueSeqTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_codegen_shared"] = [{"text":"impl UnwindSafe for IntCC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatCC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncodingBits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpcodePrefix","synthetic":true,"types":[]}];
implementors["cranelift_entity"] = [{"text":"impl&lt;K, V&gt; UnwindSafe for BoxedSlice&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for Keys&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EntityList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ListPool&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for SecondaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for PrimaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for EntitySet&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for SparseMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PackedOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cranelift_filetests"] = [{"text":"impl !UnwindSafe for SingleFunctionCompiler","synthetic":true,"types":[]}];
implementors["cranelift_frontend"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for FunctionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionBuilderContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Switch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variable","synthetic":true,"types":[]}];
implementors["cranelift_interpreter"] = [{"text":"impl UnwindSafe for Environment","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interpreter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFlow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trap","synthetic":true,"types":[]}];
implementors["cranelift_module"] = [{"text":"impl UnwindSafe for DataContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FuncId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Module&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledData: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ModuleFunction&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for ModuleNamespace&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledData: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CompiledFunction: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrapSite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Init","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FuncOrDataId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Linkage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleError","synthetic":true,"types":[]}];
implementors["cranelift_object"] = [{"text":"impl !UnwindSafe for ObjectBackend","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ObjectBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectProduct","synthetic":true,"types":[]}];
implementors["cranelift_reader"] = [{"text":"impl UnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Invocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourceMap","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TestCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Comment&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Details&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TestFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IsaSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseOptionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comparison","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataValueCastFailure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RunCommand","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TestOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Feature&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["cranelift_simplejit"] = [{"text":"impl !UnwindSafe for SimpleJITBackend","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SimpleJITBuilder","synthetic":true,"types":[]}];
implementors["cranelift_wasm"] = [{"text":"impl UnwindSafe for DummyEnvironment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmFuncType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FuncTranslator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FuncTranslationState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleTranslationState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefinedFuncIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefinedGlobalIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefinedMemoryIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefinedTableIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElemIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FuncIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Memory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalVariable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalInit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableElementType","synthetic":true,"types":[]}];
implementors["lightbeam"] = [{"text":"impl&lt;'module, M&gt; !UnwindSafe for CodeGenSession&lt;'module, M&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NullOffsetSink","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Sinks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ExecutableModule","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TranslatedModule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecutionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ieee32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ieee64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignfulInt","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; UnwindSafe for BrTable&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; UnwindSafe for BrTargetDrop&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryImmediate","synthetic":true,"types":[]},{"text":"impl&lt;'a, M&gt; UnwindSafe for MicrowasmConv&lt;'a, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpSig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signedness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Size","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Type&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NameTag","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; UnwindSafe for BrTarget&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Label&gt; UnwindSafe for Operator&lt;Label&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Label: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["peepmatic"] = [{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Optimizations&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Optimization&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Lhs&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Integer&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Boolean&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for ConditionCode&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Constant&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Variable&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator, TOperand&gt; UnwindSafe for Operation&lt;'a, TOperator, TOperand&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperand: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Precondition&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Unquote&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !UnwindSafe for Dfs&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerifyError","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; !UnwindSafe for DynAstRef&lt;'a, TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Pattern&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for ValueLiteral&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for ConstraintOperand&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TOperator&gt; UnwindSafe for Rhs&lt;'a, TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraversalEvent","synthetic":true,"types":[]}];
implementors["peepmatic_automata"] = [{"text":"impl&lt;TAlphabet, TState, TOutput&gt; UnwindSafe for Builder&lt;TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;'a, TAlphabet, TState, TOutput&gt; !UnwindSafe for InsertionBuilder&lt;'a, TAlphabet, TState, TOutput&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TAlphabet, TState, TOutput&gt; UnwindSafe for Automaton&lt;TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TAlphabet, TState, TOutput&gt; UnwindSafe for Query&lt;'a, TAlphabet, TState, TOutput&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TAlphabet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutput: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TState: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DebugDotFmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisplayDotFmt","synthetic":true,"types":[]}];
implementors["peepmatic_runtime"] = [{"text":"impl UnwindSafe for ConditionCode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntegerId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntegerInterner","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; !UnwindSafe for Optimizations&lt;TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; UnwindSafe for Optimization&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; UnwindSafe for Increment&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LhsId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RhsId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchOp","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; UnwindSafe for Action&lt;TOperator&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TOperator: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TOperator&gt; !UnwindSafe for PeepholeOptimizations&lt;TOperator&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'peep, 'ctx, TInstructionSet&gt; !UnwindSafe for PeepholeOptimizer&lt;'peep, 'ctx, TInstructionSet&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constant","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Part&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Path&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathId","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PathInterner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitWidth","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnquoteOperator","synthetic":true,"types":[]}];
implementors["peepmatic_test"] = [{"text":"impl UnwindSafe for Instruction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstructionData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Program","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestIsa","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Immediate","synthetic":true,"types":[]}];
implementors["peepmatic_test_operator"] = [{"text":"impl UnwindSafe for TestOperator","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["wasi_common"] = [{"text":"impl !UnwindSafe for WasiCtx","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WasiCtxBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HandleRights","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsDir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsOther","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WasiCtxBuilderError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; !UnwindSafe for Dir&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DirBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; !UnwindSafe for File&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Permissions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadDir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasiCtx","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasiCtxBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_dirent_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_fdstat_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_filestat_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_event_fd_readwrite_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_subscription_clock_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_subscription_fd_readwrite_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_subscription_u_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_subscription_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_subscription_u_u_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasiError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_iovec_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_ciovec_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_prestat_dir_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_prestat_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __wasi_prestat_u_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VecFileContents","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InMemoryFile","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for VirtualDir","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for VirtualDirEntry","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadPipe&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WritePipe&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rights","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fd","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Iovec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Ciovec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dirent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fdflags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fdstat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fstflags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lookupflags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Oflags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Filestat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eventrwflags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventFdReadwrite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Subclockflags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubscriptionClock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubscriptionFdReadwrite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Subscription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Riflags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Roflags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sdflags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrestatDir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Clockid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Filetype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Advice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eventtype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubscriptionU","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Preopentype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Prestat","synthetic":true,"types":[]}];
implementors["wasmtime"] = [{"text":"impl !UnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Memory","synthetic":true,"types":[]},{"text":"impl&lt;'instance&gt; !UnwindSafe for Export&lt;'instance&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FrameInfo","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Func","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Caller&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Instance","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Linker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ExternRef","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Engine","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Store","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterruptHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Trap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FuncType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryType","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; UnwindSafe for ImportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'module&gt; UnwindSafe for ExportType&lt;'module&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Strategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OptLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProfilingStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mutability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExternType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Val","synthetic":true,"types":[]}];
implementors["wasmtime_cache"] = [{"text":"impl UnwindSafe for CacheConfig","synthetic":true,"types":[]},{"text":"impl&lt;'config&gt; UnwindSafe for ModuleCacheEntry&lt;'config&gt;","synthetic":true,"types":[]}];
implementors["wasmtime_cranelift"] = [{"text":"impl UnwindSafe for Cranelift","synthetic":true,"types":[]}];
implementors["wasmtime_debug"] = [{"text":"impl UnwindSafe for DwarfSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DwarfSectionRelocTarget","synthetic":true,"types":[]}];
implementors["wasmtime_environ"] = [{"text":"impl UnwindSafe for InstructionAddressMap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionAddressMap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuiltinFunctionIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompiledFunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Relocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrapInformation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackMapInformation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryPlan","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableElements","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TablePlan","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; UnwindSafe for ModuleEnvironment&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; UnwindSafe for ModuleTranslation&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FunctionBodyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DebugInfoData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for NameSection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmFileInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataInitializerLocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; UnwindSafe for DataInitializer&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tunables","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMOffsets","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleMemoryOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RelocationTarget","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompileError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntityIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableStyle","synthetic":true,"types":[]}];
implementors["wasmtime_fuzzing"] = [{"text":"impl UnwindSafe for DifferentialConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecTest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableOps","synthetic":true,"types":[]}];
implementors["wasmtime_jit"] = [{"text":"impl UnwindSafe for CodeMemory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compilation","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Compiler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompilationArtifacts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompiledModule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompilationStrategy","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SetupError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrampolineRelocSink","synthetic":true,"types":[]}];
implementors["wasmtime_lightbeam"] = [{"text":"impl UnwindSafe for Lightbeam","synthetic":true,"types":[]}];
implementors["wasmtime_obj"] = [{"text":"impl&lt;'a&gt; UnwindSafe for ObjectBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectBuilderTarget","synthetic":true,"types":[]}];
implementors["wasmtime_profiling"] = [{"text":"impl UnwindSafe for JitDumpAgent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VTuneAgent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NullProfilerAgent","synthetic":true,"types":[]}];
implementors["wasmtime_runtime"] = [{"text":"impl UnwindSafe for ExportFunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExportTable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExportMemory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExportGlobal","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for VMExternRef","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for VMExternRefActivationsTable","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StackMapRegistry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Imports&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InstanceHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GdbJitImageRegistration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mmap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureRegistry","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMCallerCheckedAnyfunc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMFunctionBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMFunctionImport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMGlobalDefinition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMGlobalImport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMInterrupts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMInvokeArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMMemoryDefinition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMMemoryImport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMTableDefinition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMTableImport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Export","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InstantiationError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TableElement","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Trap","synthetic":true,"types":[]}];
implementors["wasmtime_wasi"] = [{"text":"impl !UnwindSafe for Wasi","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Wasi","synthetic":true,"types":[]}];
implementors["wasmtime_wast"] = [{"text":"impl !UnwindSafe for WastContext","synthetic":true,"types":[]}];
implementors["wasmtime_wiggle"] = [{"text":"impl !UnwindSafe for WasmtimeGuestMemory","synthetic":true,"types":[]}];
implementors["wiggle"] = [{"text":"impl UnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BorrowHandle","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for GuestPtr&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for GuestSlice&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for GuestStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GuestError","synthetic":true,"types":[]}];
implementors["wiggle_generate"] = [{"text":"impl !UnwindSafe for ErrorTransform","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UserErrorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Names","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paths","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CtxConf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorConf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorConfField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WitxConf","synthetic":true,"types":[]}];
implementors["wiggle_test"] = [{"text":"impl UnwindSafe for MemAreas","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostMemory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemArea","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WasiCtx&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["witx"] = [{"text":"impl !UnwindSafe for Document","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnumDatatype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnumVariant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsDatatype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsMember","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for HandleDatatype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntDatatype","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InterfaceFunc","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InterfaceFuncParam","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleImport","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for NamedType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StructDatatype","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StructMember","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnionDatatype","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnionVariant","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CoreFuncType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CoreParamType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Filesystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MockFs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SizeAlign","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for StructMemberLayout&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnionLayout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuiltinType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Definition","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntRepr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceFuncParamPosition","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ModuleDefinition","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ModuleEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleImportVariant","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TypeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtomType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoreParamSignifies","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePassedBy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DeclSyntax&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SExpr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepEquality","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValidationError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WitxError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Polyfill","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ModulePolyfill","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FuncPolyfill","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParamPolyfill","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PolyfillError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParamUnknown","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TypePolyfill","synthetic":true,"types":[]}];
implementors["yanix"] = [{"text":"impl UnwindSafe for ClockId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SeekLoc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DirIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PosixFadviseAdvice","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()