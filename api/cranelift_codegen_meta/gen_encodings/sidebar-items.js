initSidebarItems({"constant":[["CODE_BITS","The u16 values in an encoding list entry are interpreted as follows:"],["PRED_BITS","Number of bits used to hold a predicate number (instruction + ISA predicates)."],["PRED_MASK","Mask for extracting the predicate number."],["PRED_START","Beginning of the predicate code words."]],"fn":[["emit_encoding_tables",""],["emit_inst_predicates","Emit private functions for matching instruction predicates as well as a static `INST_PREDICATES` array indexed by predicate number."],["emit_instp","Emit code for matching an instruction predicate against an `InstructionData` reference called `inst`."],["emit_operand_constraints","Emit a struct field initializer for an array of operand constraints."],["emit_recipe_constraints","Emit a table of encoding recipe operand constraints keyed by recipe number."],["emit_recipe_names","Emit a table of encoding recipe names keyed by recipe number."],["emit_recipe_predicates","Emit private functions for checking recipe predicates as well as a static `RECIPE_PREDICATES` array indexed by recipe number."],["emit_recipe_sizing","Emit a table of encoding recipe code size information."],["encode_enclists","Compute encodings and doc comments for encoding lists in `level1`."],["encode_level2_hashtables",""],["gen_isa",""],["generate",""],["get_fixed_registers","Returns a set of all the registers involved in fixed register constraints."],["make_tables",""]],"struct":[["Encoder","Encoder for the list format above."],["EncodingList","List of instructions for encoding a given type + opcode pair."],["Level1Table","Level 1 table mapping types to `Level2` objects."],["Level2HashTableEntry",""],["Level2Table","Level 2 table mapping instruction opcodes to `EncList` objects."]]});